
adc_h743_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009144  08009144  00019144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000154  24000010  08009174  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000164  08009174  00020164  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d598  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002cc7  00000000  00000000  0003d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001140  00000000  00000000  000402a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001048  00000000  00000000  000413e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037ce6  00000000  00000000  00042428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001557c  00000000  00000000  0007a10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016fa68  00000000  00000000  0008f68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001ff0f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004a14  00000000  00000000  001ff148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800912c 	.word	0x0800912c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800912c 	.word	0x0800912c

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fc62 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f824 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f9fa 	bl	80006dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80002e8:	f000 f92a 	bl	8000540 <MX_TIM1_Init>
  MX_DMA_Init();
 80002ec:	f000 f9d6 	bl	800069c <MX_DMA_Init>
  MX_ADC1_Init();
 80002f0:	f000 f890 	bl	8000414 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80002f4:	2100      	movs	r1, #0
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <main+0x44>)
 80002f8:	f007 fe92 	bl	8008020 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA( &hadc1, (uint32_t *) Value, 2);
 80002fc:	2202      	movs	r2, #2
 80002fe:	4908      	ldr	r1, [pc, #32]	; (8000320 <main+0x48>)
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <main+0x4c>)
 8000302:	f001 f89b 	bl	800143c <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start( &hadc1,   ADC_CALIB_OFFSET,  ADC_SINGLE_ENDED);
 8000306:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800030a:	2100      	movs	r1, #0
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <main+0x4c>)
 800030e:	f001 ffa9 	bl	8002264 <HAL_ADCEx_Calibration_Start>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		Signal = Value [0];
 8000312:	4b03      	ldr	r3, [pc, #12]	; (8000320 <main+0x48>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <main+0x50>)
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e7fa      	b.n	8000312 <main+0x3a>
 800031c:	24000114 	.word	0x24000114
 8000320:	24000030 	.word	0x24000030
 8000324:	24000038 	.word	0x24000038
 8000328:	2400002c 	.word	0x2400002c

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	224c      	movs	r2, #76	; 0x4c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f008 feee 	bl	800911c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2220      	movs	r2, #32
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f008 fee8 	bl	800911c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800034c:	2002      	movs	r0, #2
 800034e:	f004 fc63 	bl	8004c18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <SystemClock_Config+0xdc>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	4a2b      	ldr	r2, [pc, #172]	; (8000408 <SystemClock_Config+0xdc>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000362:	4b29      	ldr	r3, [pc, #164]	; (8000408 <SystemClock_Config+0xdc>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <SystemClock_Config+0xe0>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000374:	4a25      	ldr	r2, [pc, #148]	; (800040c <SystemClock_Config+0xe0>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <SystemClock_Config+0xe0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000388:	bf00      	nop
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <SystemClock_Config+0xe0>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000396:	d1f8      	bne.n	800038a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <SystemClock_Config+0xe4>)
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <SystemClock_Config+0xe4>)
 800039e:	f023 0303 	bic.w	r3, r3, #3
 80003a2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2340      	movs	r3, #64	; 0x40
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003bc:	4618      	mov	r0, r3
 80003be:	f004 fc65 	bl	8004c8c <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003c8:	f000 f9c0 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	233f      	movs	r3, #63	; 0x3f
 80003ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2101      	movs	r1, #1
 80003f0:	4618      	mov	r0, r3
 80003f2:	f005 f877 	bl	80054e4 <HAL_RCC_ClockConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80003fc:	f000 f9a6 	bl	800074c <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3770      	adds	r7, #112	; 0x70
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	58000400 	.word	0x58000400
 800040c:	58024800 	.word	0x58024800
 8000410:	58024400 	.word	0x58024400

08000414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000426:	463b      	mov	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]
 8000436:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <MX_ADC1_Init+0x11c>)
 800043a:	4a3e      	ldr	r2, [pc, #248]	; (8000534 <MX_ADC1_Init+0x120>)
 800043c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800043e:	4b3c      	ldr	r3, [pc, #240]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000444:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800044a:	4b39      	ldr	r3, [pc, #228]	; (8000530 <MX_ADC1_Init+0x11c>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000450:	4b37      	ldr	r3, [pc, #220]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000452:	2208      	movs	r2, #8
 8000454:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000458:	2200      	movs	r2, #0
 800045a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <MX_ADC1_Init+0x11c>)
 800045e:	2201      	movs	r2, #1
 8000460:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000462:	4b33      	ldr	r3, [pc, #204]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000464:	2202      	movs	r2, #2
 8000466:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000468:	4b31      	ldr	r3, [pc, #196]	; (8000530 <MX_ADC1_Init+0x11c>)
 800046a:	2200      	movs	r2, #0
 800046c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000474:	4b2e      	ldr	r3, [pc, #184]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <MX_ADC1_Init+0x11c>)
 800047c:	2203      	movs	r2, #3
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000486:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <MX_ADC1_Init+0x11c>)
 800048a:	2200      	movs	r2, #0
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800048e:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000490:	2201      	movs	r2, #1
 8000492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 32;
 8000496:	4b26      	ldr	r3, [pc, #152]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000498:	2220      	movs	r2, #32
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_ADC1_Init+0x11c>)
 800049e:	22a0      	movs	r2, #160	; 0xa0
 80004a0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80004a2:	4b23      	ldr	r3, [pc, #140]	; (8000530 <MX_ADC1_Init+0x11c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80004a8:	4b21      	ldr	r3, [pc, #132]	; (8000530 <MX_ADC1_Init+0x11c>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ae:	4820      	ldr	r0, [pc, #128]	; (8000530 <MX_ADC1_Init+0x11c>)
 80004b0:	f000 fe24 	bl	80010fc <HAL_ADC_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80004ba:	f000 f947 	bl	800074c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	4619      	mov	r1, r3
 80004c8:	4819      	ldr	r0, [pc, #100]	; (8000530 <MX_ADC1_Init+0x11c>)
 80004ca:	f001 ff2f 	bl	800232c <HAL_ADCEx_MultiModeConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004d4:	f000 f93a 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_ADC1_Init+0x124>)
 80004da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004dc:	2306      	movs	r3, #6
 80004de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80004e0:	2302      	movs	r3, #2
 80004e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80004e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ea:	2304      	movs	r3, #4
 80004ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f6:	463b      	mov	r3, r7
 80004f8:	4619      	mov	r1, r3
 80004fa:	480d      	ldr	r0, [pc, #52]	; (8000530 <MX_ADC1_Init+0x11c>)
 80004fc:	f001 f880 	bl	8001600 <HAL_ADC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000506:	f000 f921 	bl	800074c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_ADC1_Init+0x128>)
 800050c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800050e:	230c      	movs	r3, #12
 8000510:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000512:	463b      	mov	r3, r7
 8000514:	4619      	mov	r1, r3
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <MX_ADC1_Init+0x11c>)
 8000518:	f001 f872 	bl	8001600 <HAL_ADC_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000522:	f000 f913 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	; 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	24000038 	.word	0x24000038
 8000534:	40022000 	.word	0x40022000
 8000538:	08600004 	.word	0x08600004
 800053c:	0c900008 	.word	0x0c900008

08000540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09a      	sub	sp, #104	; 0x68
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	222c      	movs	r2, #44	; 0x2c
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fdce 	bl	800911c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000580:	4b44      	ldr	r3, [pc, #272]	; (8000694 <MX_TIM1_Init+0x154>)
 8000582:	4a45      	ldr	r2, [pc, #276]	; (8000698 <MX_TIM1_Init+0x158>)
 8000584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <MX_TIM1_Init+0x154>)
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b41      	ldr	r3, [pc, #260]	; (8000694 <MX_TIM1_Init+0x154>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <MX_TIM1_Init+0x154>)
 8000594:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <MX_TIM1_Init+0x154>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a0:	4b3c      	ldr	r3, [pc, #240]	; (8000694 <MX_TIM1_Init+0x154>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <MX_TIM1_Init+0x154>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ac:	4839      	ldr	r0, [pc, #228]	; (8000694 <MX_TIM1_Init+0x154>)
 80005ae:	f007 fc7f 	bl	8007eb0 <HAL_TIM_Base_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005b8:	f000 f8c8 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c6:	4619      	mov	r1, r3
 80005c8:	4832      	ldr	r0, [pc, #200]	; (8000694 <MX_TIM1_Init+0x154>)
 80005ca:	f007 ff4b 	bl	8008464 <HAL_TIM_ConfigClockSource>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005d4:	f000 f8ba 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d8:	482e      	ldr	r0, [pc, #184]	; (8000694 <MX_TIM1_Init+0x154>)
 80005da:	f007 fcc0 	bl	8007f5e <HAL_TIM_PWM_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005e4:	f000 f8b2 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f8:	4619      	mov	r1, r3
 80005fa:	4826      	ldr	r0, [pc, #152]	; (8000694 <MX_TIM1_Init+0x154>)
 80005fc:	f008 fc5e 	bl	8008ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000606:	f000 f8a1 	bl	800074c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32000;
 800060e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	4619      	mov	r1, r3
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <MX_TIM1_Init+0x154>)
 8000632:	f007 fe03 	bl	800823c <HAL_TIM_PWM_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800063c:	f000 f886 	bl	800074c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000658:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM1_Init+0x154>)
 8000676:	f008 fcaf 	bl	8008fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000680:	f000 f864 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM1_Init+0x154>)
 8000686:	f000 f96b 	bl	8000960 <HAL_TIM_MspPostInit>

}
 800068a:	bf00      	nop
 800068c:	3768      	adds	r7, #104	; 0x68
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	24000114 	.word	0x24000114
 8000698:	40010000 	.word	0x40010000

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a8:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	200c      	movs	r0, #12
 80006c6:	f001 ffea 	bl	800269e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ca:	200c      	movs	r0, #12
 80006cc:	f002 f801 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024400 	.word	0x58024400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0x6c>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_GPIO_Init+0x6c>)
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_GPIO_Init+0x6c>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	4a10      	ldr	r2, [pc, #64]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_GPIO_Init+0x6c>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	58024400 	.word	0x58024400

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x30>)
 8000760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000764:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_MspInit+0x30>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_MspInit+0x30>)
 8000770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000774:	f003 0302 	and.w	r3, r3, #2
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	58024400 	.word	0x58024400

0800078c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0ba      	sub	sp, #232	; 0xe8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	22bc      	movs	r2, #188	; 0xbc
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 fcb5 	bl	800911c <memset>
  if(hadc->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a53      	ldr	r2, [pc, #332]	; (8000904 <HAL_ADC_MspInit+0x178>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	f040 809e 	bne.w	80008fa <HAL_ADC_MspInit+0x16e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80007c8:	2309      	movs	r3, #9
 80007ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007d8:	23c0      	movs	r3, #192	; 0xc0
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007dc:	2320      	movs	r3, #32
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80007e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 f9d7 	bl	8005ba4 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 80007fc:	f7ff ffa6 	bl	800074c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000800:	4b41      	ldr	r3, [pc, #260]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b3a      	ldr	r3, [pc, #232]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a38      	ldr	r2, [pc, #224]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	4a31      	ldr	r2, [pc, #196]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084c:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <HAL_ADC_MspInit+0x17c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000870:	4619      	mov	r1, r3
 8000872:	4826      	ldr	r0, [pc, #152]	; (800090c <HAL_ADC_MspInit+0x180>)
 8000874:	f004 f820 	bl	80048b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800087c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000890:	4619      	mov	r1, r3
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <HAL_ADC_MspInit+0x184>)
 8000894:	f004 f810 	bl	80048b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_ADC_MspInit+0x188>)
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <HAL_ADC_MspInit+0x18c>)
 800089c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008a0:	2209      	movs	r2, #9
 80008a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008e0:	f001 ff12 	bl	8002708 <HAL_DMA_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80008ea:	f7ff ff2f 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_ADC_MspInit+0x188>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	37e8      	adds	r7, #232	; 0xe8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000
 8000908:	58024400 	.word	0x58024400
 800090c:	58020000 	.word	0x58020000
 8000910:	58021400 	.word	0x58021400
 8000914:	2400009c 	.word	0x2400009c
 8000918:	40020028 	.word	0x40020028

0800091c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_TIM_Base_MspInit+0x3c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d10e      	bne.n	800094c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_TIM_Base_MspInit+0x40>)
 8000930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x40>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_TIM_Base_MspInit+0x40>)
 8000940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40010000 	.word	0x40010000
 800095c:	58024400 	.word	0x58024400

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_TIM_MspPostInit+0x6c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d11f      	bne.n	80009c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_TIM_MspPostInit+0x70>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <HAL_TIM_MspPostInit+0x70>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_TIM_MspPostInit+0x70>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_TIM_MspPostInit+0x74>)
 80009be:	f003 ff7b 	bl	80048b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010000 	.word	0x40010000
 80009d0:	58024400 	.word	0x58024400
 80009d4:	58021000 	.word	0x58021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f930 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Stream1_IRQHandler+0x10>)
 8000a32:	f002 fc2f 	bl	8003294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2400009c 	.word	0x2400009c

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <SystemInit+0xe4>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a36      	ldr	r2, [pc, #216]	; (8000b24 <SystemInit+0xe4>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <SystemInit+0xe8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d807      	bhi.n	8000a70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <SystemInit+0xe8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f023 030f 	bic.w	r3, r3, #15
 8000a68:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <SystemInit+0xe8>)
 8000a6a:	f043 0307 	orr.w	r3, r3, #7
 8000a6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <SystemInit+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <SystemInit+0xec>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <SystemInit+0xec>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4929      	ldr	r1, [pc, #164]	; (8000b2c <SystemInit+0xec>)
 8000a88:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <SystemInit+0xf0>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <SystemInit+0xe8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <SystemInit+0xe8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f023 030f 	bic.w	r3, r3, #15
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <SystemInit+0xe8>)
 8000aa4:	f043 0307 	orr.w	r3, r3, #7
 8000aa8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <SystemInit+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <SystemInit+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <SystemInit+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <SystemInit+0xec>)
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <SystemInit+0xf4>)
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <SystemInit+0xec>)
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <SystemInit+0xf8>)
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <SystemInit+0xec>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <SystemInit+0xfc>)
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <SystemInit+0xec>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <SystemInit+0xec>)
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <SystemInit+0xfc>)
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <SystemInit+0xec>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <SystemInit+0xfc>)
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <SystemInit+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <SystemInit+0xec>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <SystemInit+0x100>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x104>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b0a:	d202      	bcs.n	8000b12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <SystemInit+0x108>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <SystemInit+0x10c>)
 8000b14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b18:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	52002000 	.word	0x52002000
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b34:	02020200 	.word	0x02020200
 8000b38:	01ff0000 	.word	0x01ff0000
 8000b3c:	01010280 	.word	0x01010280
 8000b40:	5c001000 	.word	0x5c001000
 8000b44:	ffff0000 	.word	0xffff0000
 8000b48:	51008108 	.word	0x51008108
 8000b4c:	52004000 	.word	0x52004000

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff ff74 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f008 faa9 	bl	80090d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fba9 	bl	80002d8 <main>
  bx  lr
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b90:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b94:	08009164 	.word	0x08009164
  ldr r2, =_sbss
 8000b98:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b9c:	24000164 	.word	0x24000164

08000ba0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC3_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f001 fd6c 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bb0:	f004 fe4e 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_Init+0x68>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	4913      	ldr	r1, [pc, #76]	; (8000c10 <HAL_Init+0x6c>)
 8000bc2:	5ccb      	ldrb	r3, [r1, r3]
 8000bc4:	f003 031f 	and.w	r3, r3, #31
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_Init+0x68>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_Init+0x6c>)
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	f003 031f 	and.w	r3, r3, #31
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	fa22 f303 	lsr.w	r3, r2, r3
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_Init+0x70>)
 8000be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_Init+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f814 	bl	8000c1c <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e002      	b.n	8000c04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfe:	f7ff fdab 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	08009144 	.word	0x08009144
 8000c14:	24000004 	.word	0x24000004
 8000c18:	24000000 	.word	0x24000000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_InitTick+0x60>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e021      	b.n	8000c74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_InitTick+0x64>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_InitTick+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fd51 	bl	80026ee <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f001 fd1b 	bl	800269e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x68>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2400000c 	.word	0x2400000c
 8000c80:	24000000 	.word	0x24000000
 8000c84:	24000008 	.word	0x24000008

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2400000c 	.word	0x2400000c
 8000cac:	24000160 	.word	0x24000160

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	24000160 	.word	0x24000160

08000cc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetREVID+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0c1b      	lsrs	r3, r3, #16
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	5c001000 	.word	0x5c001000

08000ce0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3360      	adds	r3, #96	; 0x60
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	611a      	str	r2, [r3, #16]
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3360      	adds	r3, #96	; 0x60
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	601a      	str	r2, [r3, #0]
  }
}
 8000de4:	bf00      	nop
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3330      	adds	r3, #48	; 0x30
 8000e26:	461a      	mov	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	4413      	add	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	211f      	movs	r1, #31
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	401a      	ands	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	f003 011f 	and.w	r1, r3, #31
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e62:	bf00      	nop
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f023 0203 	bic.w	r2, r3, #3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3314      	adds	r3, #20
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	0e5b      	lsrs	r3, r3, #25
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	0d1b      	lsrs	r3, r3, #20
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	0d1b      	lsrs	r3, r3, #20
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0318 	and.w	r3, r3, #24
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f10:	40d9      	lsrs	r1, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	400b      	ands	r3, r1
 8000f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	000fffff 	.word	0x000fffff

08000f34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 031f 	and.w	r3, r3, #31
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6093      	str	r3, [r2, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	5fffffc0 	.word	0x5fffffc0

08000f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f88:	d101      	bne.n	8000f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	6fffffc0 	.word	0x6fffffc0

08000fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fd8:	d101      	bne.n	8000fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <LL_ADC_Enable+0x24>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	7fffffc0 	.word	0x7fffffc0

08001014 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_ADC_Disable+0x24>)
 8001022:	4013      	ands	r3, r2
 8001024:	f043 0202 	orr.w	r2, r3, #2
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	7fffffc0 	.word	0x7fffffc0

0800103c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <LL_ADC_IsEnabled+0x18>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <LL_ADC_IsEnabled+0x1a>
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b02      	cmp	r3, #2
 8001074:	d101      	bne.n	800107a <LL_ADC_IsDisableOngoing+0x18>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <LL_ADC_IsDisableOngoing+0x1a>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LL_ADC_REG_StartConversion+0x24>)
 8001096:	4013      	ands	r3, r2
 8001098:	f043 0204 	orr.w	r2, r3, #4
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	7fffffc0 	.word	0x7fffffc0

080010b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d101      	bne.n	80010ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e18e      	b.n	8001434 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fb31 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff19 	bl	8000f74 <LL_ADC_IsDeepPowerDownEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff feff 	bl	8000f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff34 	bl	8000fc4 <LL_ADC_IsInternalRegulatorEnabled>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d114      	bne.n	800118c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff18 	bl	8000f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <HAL_ADC_Init+0x2dc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	4a9a      	ldr	r2, [pc, #616]	; (80013dc <HAL_ADC_Init+0x2e0>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	099b      	lsrs	r3, r3, #6
 800117a:	3301      	adds	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800117e:	e002      	b.n	8001186 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3b01      	subs	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f9      	bne.n	8001180 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff17 	bl	8000fc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	f043 0210 	orr.w	r2, r3, #16
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff77 	bl	80010b0 <LL_ADC_REG_IsConversionOngoing>
 80011c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 8128 	bne.w	8001422 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 8124 	bne.w	8001422 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011e2:	f043 0202 	orr.w	r2, r3, #2
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff24 	bl	800103c <LL_ADC_IsEnabled>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d136      	bne.n	8001268 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a78      	ldr	r2, [pc, #480]	; (80013e0 <HAL_ADC_Init+0x2e4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d004      	beq.n	800120e <HAL_ADC_Init+0x112>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a76      	ldr	r2, [pc, #472]	; (80013e4 <HAL_ADC_Init+0x2e8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_ADC_Init+0x130>
 800120e:	4874      	ldr	r0, [pc, #464]	; (80013e0 <HAL_ADC_Init+0x2e4>)
 8001210:	f7ff ff14 	bl	800103c <LL_ADC_IsEnabled>
 8001214:	4604      	mov	r4, r0
 8001216:	4873      	ldr	r0, [pc, #460]	; (80013e4 <HAL_ADC_Init+0x2e8>)
 8001218:	f7ff ff10 	bl	800103c <LL_ADC_IsEnabled>
 800121c:	4603      	mov	r3, r0
 800121e:	4323      	orrs	r3, r4
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	e008      	b.n	800123e <HAL_ADC_Init+0x142>
 800122c:	486e      	ldr	r0, [pc, #440]	; (80013e8 <HAL_ADC_Init+0x2ec>)
 800122e:	f7ff ff05 	bl	800103c <LL_ADC_IsEnabled>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_ADC_Init+0x2e4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d004      	beq.n	8001256 <HAL_ADC_Init+0x15a>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a64      	ldr	r2, [pc, #400]	; (80013e4 <HAL_ADC_Init+0x2e8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_ADC_Init+0x15e>
 8001256:	4a65      	ldr	r2, [pc, #404]	; (80013ec <HAL_ADC_Init+0x2f0>)
 8001258:	e000      	b.n	800125c <HAL_ADC_Init+0x160>
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_ADC_Init+0x2f4>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f7ff fd3c 	bl	8000ce0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001268:	f7ff fd2e 	bl	8000cc8 <HAL_GetREVID>
 800126c:	4603      	mov	r3, r0
 800126e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001272:	4293      	cmp	r3, r2
 8001274:	d914      	bls.n	80012a0 <HAL_ADC_Init+0x1a4>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d110      	bne.n	80012a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7d5b      	ldrb	r3, [r3, #21]
 8001282:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001288:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800128e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7f1b      	ldrb	r3, [r3, #28]
 8001294:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001296:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001298:	f043 030c 	orr.w	r3, r3, #12
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	e00d      	b.n	80012bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7d5b      	ldrb	r3, [r3, #21]
 80012a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80012b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7f1b      	ldrb	r3, [r3, #28]
 80012b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7f1b      	ldrb	r3, [r3, #28]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d106      	bne.n	80012d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	045b      	lsls	r3, r3, #17
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_ADC_Init+0x2f8>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	69b9      	ldr	r1, [r7, #24]
 80012fe:	430b      	orrs	r3, r1
 8001300:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fed2 	bl	80010b0 <LL_ADC_REG_IsConversionOngoing>
 800130c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fedf 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 8001318:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d14a      	bne.n	80013b6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d147      	bne.n	80013b6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7d1b      	ldrb	r3, [r3, #20]
 800132a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_ADC_Init+0x2fc>)
 800133c:	4013      	ands	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	430b      	orrs	r3, r1
 8001346:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800134e:	2b01      	cmp	r3, #1
 8001350:	d11b      	bne.n	800138a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_ADC_Init+0x300>)
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001366:	3a01      	subs	r2, #1
 8001368:	0411      	lsls	r1, r2, #16
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800136e:	4311      	orrs	r1, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001374:	4311      	orrs	r1, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800137a:	430a      	orrs	r2, r1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	e007      	b.n	800139a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fdf3 	bl	8001f9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d120      	bne.n	8001400 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f023 010f 	bic.w	r1, r3, #15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	e01b      	b.n	8001410 <HAL_ADC_Init+0x314>
 80013d8:	24000000 	.word	0x24000000
 80013dc:	053e2d63 	.word	0x053e2d63
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40022100 	.word	0x40022100
 80013e8:	58026000 	.word	0x58026000
 80013ec:	40022300 	.word	0x40022300
 80013f0:	58026300 	.word	0x58026300
 80013f4:	fff0c003 	.word	0xfff0c003
 80013f8:	ffffbffc 	.word	0xffffbffc
 80013fc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020f 	bic.w	r2, r2, #15
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f023 0303 	bic.w	r3, r3, #3
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
 8001420:	e007      	b.n	8001432 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3724      	adds	r7, #36	; 0x24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}

0800143c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_ADC_Start_DMA+0x168>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_ADC_Start_DMA+0x20>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <HAL_ADC_Start_DMA+0x16c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_ADC_Start_DMA+0x24>
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_ADC_Start_DMA+0x170>)
 800145e:	e000      	b.n	8001462 <HAL_ADC_Start_DMA+0x26>
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_ADC_Start_DMA+0x174>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd66 	bl	8000f34 <LL_ADC_GetMultimode>
 8001468:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe1e 	bl	80010b0 <LL_ADC_REG_IsConversionOngoing>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 808c 	bne.w	8001594 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Start_DMA+0x4e>
 8001486:	2302      	movs	r3, #2
 8001488:	e087      	b.n	800159a <HAL_ADC_Start_DMA+0x15e>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d002      	beq.n	80014a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d170      	bne.n	8001586 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fbfb 	bl	8001ca0 <ADC_Enable>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d163      	bne.n	800157c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_ADC_Start_DMA+0x178>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a37      	ldr	r2, [pc, #220]	; (80015a8 <HAL_ADC_Start_DMA+0x16c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d002      	beq.n	80014d4 <HAL_ADC_Start_DMA+0x98>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	e000      	b.n	80014d6 <HAL_ADC_Start_DMA+0x9a>
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_ADC_Start_DMA+0x168>)
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4293      	cmp	r3, r2
 80014dc:	d002      	beq.n	80014e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	f023 0206 	bic.w	r2, r3, #6
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	659a      	str	r2, [r3, #88]	; 0x58
 8001508:	e002      	b.n	8001510 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_ADC_Start_DMA+0x17c>)
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <HAL_ADC_Start_DMA+0x180>)
 800151e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_ADC_Start_DMA+0x184>)
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	221c      	movs	r2, #28
 800152e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0210 	orr.w	r2, r2, #16
 8001546:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f7ff fc8b 	bl	8000e6e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3340      	adds	r3, #64	; 0x40
 8001562:	4619      	mov	r1, r3
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f001 fc2a 	bl	8002dc0 <HAL_DMA_Start_IT>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fd87 	bl	8001088 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800157a:	e00d      	b.n	8001598 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001584:	e008      	b.n	8001598 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001592:	e001      	b.n	8001598 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001594:	2302      	movs	r3, #2
 8001596:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40022100 	.word	0x40022100
 80015ac:	40022300 	.word	0x40022300
 80015b0:	58026300 	.word	0x58026300
 80015b4:	fffff0fe 	.word	0xfffff0fe
 80015b8:	08001e73 	.word	0x08001e73
 80015bc:	08001f4b 	.word	0x08001f4b
 80015c0:	08001f67 	.word	0x08001f67

080015c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b0a1      	sub	sp, #132	; 0x84
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a9d      	ldr	r2, [pc, #628]	; (8001890 <HAL_ADC_ConfigChannel+0x290>)
 800161a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_ConfigChannel+0x2a>
 8001626:	2302      	movs	r3, #2
 8001628:	e321      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x66e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd3a 	bl	80010b0 <LL_ADC_REG_IsConversionOngoing>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8306 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x62>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	2201      	movs	r2, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	e016      	b.n	8001690 <HAL_ADC_ConfigChannel+0x90>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001672:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800167a:	2320      	movs	r3, #32
 800167c:	e003      	b.n	8001686 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800167e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2201      	movs	r2, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	69d1      	ldr	r1, [r2, #28]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	430b      	orrs	r3, r1
 800169c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f7ff fbb3 	bl	8000e16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fcfb 	bl	80010b0 <LL_ADC_REG_IsConversionOngoing>
 80016ba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd08 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 80016c6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80b3 	bne.w	8001836 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80af 	bne.w	8001836 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f7ff fbd5 	bl	8000e94 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_ADC_ConfigChannel+0x294>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x110>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	e01d      	b.n	800174c <HAL_ADC_ConfigChannel+0x14c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10b      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x136>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	e00a      	b.n	800174c <HAL_ADC_ConfigChannel+0x14c>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d027      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6919      	ldr	r1, [r3, #16]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001764:	f7ff faf0 	bl	8000d48 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	7e5b      	ldrb	r3, [r3, #25]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_ADC_ConfigChannel+0x17e>
 8001778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800177c:	e000      	b.n	8001780 <HAL_ADC_ConfigChannel+0x180>
 800177e:	2300      	movs	r3, #0
 8001780:	461a      	mov	r2, r3
 8001782:	f7ff fb1a 	bl	8000dba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6919      	ldr	r1, [r3, #16]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7e1b      	ldrb	r3, [r3, #24]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_ADC_ConfigChannel+0x19c>
 8001796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179a:	e000      	b.n	800179e <HAL_ADC_ConfigChannel+0x19e>
 800179c:	2300      	movs	r3, #0
 800179e:	461a      	mov	r2, r3
 80017a0:	f7ff faf2 	bl	8000d88 <LL_ADC_SetDataRightShift>
 80017a4:	e047      	b.n	8001836 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	069b      	lsls	r3, r3, #26
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d107      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017c8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	069b      	lsls	r3, r3, #26
 80017da:	429a      	cmp	r2, r3
 80017dc:	d107      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017ec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	069b      	lsls	r3, r3, #26
 80017fe:	429a      	cmp	r2, r3
 8001800:	d107      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001810:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	069b      	lsls	r3, r3, #26
 8001822:	429a      	cmp	r2, r3
 8001824:	d107      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001834:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbfe 	bl	800103c <LL_ADC_IsEnabled>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 820d 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	461a      	mov	r2, r3
 8001856:	f7ff fb49 	bl	8000eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_ADC_ConfigChannel+0x290>)
 8001860:	4293      	cmp	r3, r2
 8001862:	f040 8133 	bne.w	8001acc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001872:	2b00      	cmp	r3, #0
 8001874:	d110      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x298>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	3301      	adds	r3, #1
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b09      	cmp	r3, #9
 8001884:	bf94      	ite	ls
 8001886:	2301      	movls	r3, #1
 8001888:	2300      	movhi	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	e01e      	b.n	80018cc <HAL_ADC_ConfigChannel+0x2cc>
 800188e:	bf00      	nop
 8001890:	47ff0000 	.word	0x47ff0000
 8001894:	5c001000 	.word	0x5c001000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80018aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80018b0:	2320      	movs	r3, #32
 80018b2:	e003      	b.n	80018bc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80018b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	bf94      	ite	ls
 80018c6:	2301      	movls	r3, #1
 80018c8:	2300      	movhi	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d079      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x2ec>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e9b      	lsrs	r3, r3, #26
 80018e2:	3301      	adds	r3, #1
 80018e4:	069b      	lsls	r3, r3, #26
 80018e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ea:	e015      	b.n	8001918 <HAL_ADC_ConfigChannel+0x318>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80018fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80018fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	e003      	b.n	8001910 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	069b      	lsls	r3, r3, #26
 8001914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x338>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0e9b      	lsrs	r3, r3, #26
 800192a:	3301      	adds	r3, #1
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	e017      	b.n	8001968 <HAL_ADC_ConfigChannel+0x368>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800194a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001950:	2320      	movs	r3, #32
 8001952:	e003      	b.n	800195c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	ea42 0103 	orr.w	r1, r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_ADC_ConfigChannel+0x38e>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	3301      	adds	r3, #1
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	051b      	lsls	r3, r3, #20
 800198c:	e018      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x3c0>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80019a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e003      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80019aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c0:	430b      	orrs	r3, r1
 80019c2:	e07e      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x3e0>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	3301      	adds	r3, #1
 80019d8:	069b      	lsls	r3, r3, #26
 80019da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019de:	e015      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x40c>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80019f8:	2320      	movs	r3, #32
 80019fa:	e003      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	069b      	lsls	r3, r3, #26
 8001a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x42c>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	e017      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x45c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	61bb      	str	r3, [r7, #24]
  return result;
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	e003      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	ea42 0103 	orr.w	r1, r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x488>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b1e      	subs	r3, #30
 8001a80:	051b      	lsls	r3, r3, #20
 8001a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a86:	e01b      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x4c0>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	60fb      	str	r3, [r7, #12]
  return result;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	e003      	b.n	8001aac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b1e      	subs	r3, #30
 8001aba:	051b      	lsls	r3, r3, #20
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	6892      	ldr	r2, [r2, #8]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7ff f9e4 	bl	8000e94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f280 80c6 	bge.w	8001c62 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d004      	beq.n	8001aea <HAL_ADC_ConfigChannel+0x4ea>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x4ee>
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_ADC_ConfigChannel+0x680>)
 8001aec:	e000      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x4f0>
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_ADC_ConfigChannel+0x684>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f91b 	bl	8000d2c <LL_ADC_GetCommonPathInternalCh>
 8001af6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5e      	ldr	r2, [pc, #376]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x50c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10e      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x52a>
 8001b0c:	485a      	ldr	r0, [pc, #360]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001b0e:	f7ff fa95 	bl	800103c <LL_ADC_IsEnabled>
 8001b12:	4604      	mov	r4, r0
 8001b14:	4859      	ldr	r0, [pc, #356]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001b16:	f7ff fa91 	bl	800103c <LL_ADC_IsEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4323      	orrs	r3, r4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	e008      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x53c>
 8001b2a:	4857      	ldr	r0, [pc, #348]	; (8001c88 <HAL_ADC_ConfigChannel+0x688>)
 8001b2c:	f7ff fa86 	bl	800103c <LL_ADC_IsEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d07d      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <HAL_ADC_ConfigChannel+0x68c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d130      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x5ac>
 8001b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d12b      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a4b      	ldr	r2, [pc, #300]	; (8001c88 <HAL_ADC_ConfigChannel+0x688>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	f040 8081 	bne.w	8001c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a44      	ldr	r2, [pc, #272]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d004      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x574>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x578>
 8001b74:	4a42      	ldr	r2, [pc, #264]	; (8001c80 <HAL_ADC_ConfigChannel+0x680>)
 8001b76:	e000      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x57a>
 8001b78:	4a42      	ldr	r2, [pc, #264]	; (8001c84 <HAL_ADC_ConfigChannel+0x684>)
 8001b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f7ff f8bf 	bl	8000d06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_ADC_ConfigChannel+0x690>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	4a41      	ldr	r2, [pc, #260]	; (8001c94 <HAL_ADC_ConfigChannel+0x694>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001baa:	e05a      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a39      	ldr	r2, [pc, #228]	; (8001c98 <HAL_ADC_ConfigChannel+0x698>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d11e      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x5f4>
 8001bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d119      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a30      	ldr	r2, [pc, #192]	; (8001c88 <HAL_ADC_ConfigChannel+0x688>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d14b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x5de>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x5e2>
 8001bde:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <HAL_ADC_ConfigChannel+0x680>)
 8001be0:	e000      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x5e4>
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_ADC_ConfigChannel+0x684>)
 8001be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff f88a 	bl	8000d06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bf2:	e036      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <HAL_ADC_ConfigChannel+0x69c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d131      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
 8001bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d12c      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_ADC_ConfigChannel+0x688>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d127      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_ADC_ConfigChannel+0x678>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x626>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_ADC_ConfigChannel+0x67c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x62a>
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_ADC_ConfigChannel+0x680>)
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x62c>
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <HAL_ADC_ConfigChannel+0x684>)
 8001c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7ff f866 	bl	8000d06 <LL_ADC_SetCommonPathInternalCh>
 8001c3a:	e012      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001c4e:	e008      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3784      	adds	r7, #132	; 0x84
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40022100 	.word	0x40022100
 8001c80:	40022300 	.word	0x40022300
 8001c84:	58026300 	.word	0x58026300
 8001c88:	58026000 	.word	0x58026000
 8001c8c:	cb840000 	.word	0xcb840000
 8001c90:	24000000 	.word	0x24000000
 8001c94:	053e2d63 	.word	0x053e2d63
 8001c98:	c7520000 	.word	0xc7520000
 8001c9c:	cfb80000 	.word	0xcfb80000

08001ca0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f9c5 	bl	800103c <LL_ADC_IsEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d16e      	bne.n	8001d96 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <ADC_Enable+0x100>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f043 0210 	orr.w	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e05a      	b.n	8001d98 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f980 	bl	8000fec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cec:	f7fe ffe0 	bl	8000cb0 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <ADC_Enable+0x104>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <ADC_Enable+0x66>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <ADC_Enable+0x108>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <ADC_Enable+0x6a>
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <ADC_Enable+0x10c>)
 8001d08:	e000      	b.n	8001d0c <ADC_Enable+0x6c>
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <ADC_Enable+0x110>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f911 	bl	8000f34 <LL_ADC_GetMultimode>
 8001d12:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <ADC_Enable+0x108>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d002      	beq.n	8001d24 <ADC_Enable+0x84>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	e000      	b.n	8001d26 <ADC_Enable+0x86>
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <ADC_Enable+0x104>)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02c      	beq.n	8001d88 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d130      	bne.n	8001d96 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d34:	e028      	b.n	8001d88 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f97e 	bl	800103c <LL_ADC_IsEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f94e 	bl	8000fec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d50:	f7fe ffae 	bl	8000cb0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d914      	bls.n	8001d88 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d00d      	beq.n	8001d88 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e007      	b.n	8001d98 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d1cf      	bne.n	8001d36 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	8000003f 	.word	0x8000003f
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40022100 	.word	0x40022100
 8001dac:	40022300 	.word	0x40022300
 8001db0:	58026300 	.word	0x58026300

08001db4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f94e 	bl	8001062 <LL_ADC_IsDisableOngoing>
 8001dc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f935 	bl	800103c <LL_ADC_IsEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d047      	beq.n	8001e68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d144      	bne.n	8001e68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030d 	and.w	r3, r3, #13
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10c      	bne.n	8001e06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f90f 	bl	8001014 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfe:	f7fe ff57 	bl	8000cb0 <HAL_GetTick>
 8001e02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e04:	e029      	b.n	8001e5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0210 	orr.w	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e023      	b.n	8001e6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e22:	f7fe ff45 	bl	8000cb0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d914      	bls.n	8001e5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1dc      	bne.n	8001e22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d14b      	bne.n	8001f24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d021      	beq.n	8001eea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ffa0 	bl	8000df0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d032      	beq.n	8001f1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d12b      	bne.n	8001f1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11f      	bne.n	8001f1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ee8:	e018      	b.n	8001f1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fb51 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f22:	e00e      	b.n	8001f42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fb5b 	bl	80015ec <HAL_ADC_ErrorCallback>
}
 8001f36:	e004      	b.n	8001f42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7ff fb3d 	bl	80015d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fb2d 	bl	80015ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a79      	ldr	r2, [pc, #484]	; (8002190 <ADC_ConfigureBoostMode+0x1f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <ADC_ConfigureBoostMode+0x1c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a78      	ldr	r2, [pc, #480]	; (8002194 <ADC_ConfigureBoostMode+0x1f8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d109      	bne.n	8001fcc <ADC_ConfigureBoostMode+0x30>
 8001fb8:	4b77      	ldr	r3, [pc, #476]	; (8002198 <ADC_ConfigureBoostMode+0x1fc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e008      	b.n	8001fde <ADC_ConfigureBoostMode+0x42>
 8001fcc:	4b73      	ldr	r3, [pc, #460]	; (800219c <ADC_ConfigureBoostMode+0x200>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001fe2:	f003 fdaf 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8001fe6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ff0:	d010      	beq.n	8002014 <ADC_ConfigureBoostMode+0x78>
 8001ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ff6:	d871      	bhi.n	80020dc <ADC_ConfigureBoostMode+0x140>
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d002      	beq.n	8002004 <ADC_ConfigureBoostMode+0x68>
 8001ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002002:	d16b      	bne.n	80020dc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	60fb      	str	r3, [r7, #12]
        break;
 8002012:	e066      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
        break;
 800201a:	e062      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800201c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002020:	f004 fd00 	bl	8006a24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002024:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800202e:	d051      	beq.n	80020d4 <ADC_ConfigureBoostMode+0x138>
 8002030:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002034:	d854      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 8002036:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800203a:	d047      	beq.n	80020cc <ADC_ConfigureBoostMode+0x130>
 800203c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002040:	d84e      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 8002042:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002046:	d03d      	beq.n	80020c4 <ADC_ConfigureBoostMode+0x128>
 8002048:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800204c:	d848      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 800204e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002052:	d033      	beq.n	80020bc <ADC_ConfigureBoostMode+0x120>
 8002054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002058:	d842      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 800205a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800205e:	d029      	beq.n	80020b4 <ADC_ConfigureBoostMode+0x118>
 8002060:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002064:	d83c      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 8002066:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800206a:	d01a      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x106>
 800206c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002070:	d836      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 8002072:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002076:	d014      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x106>
 8002078:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800207c:	d830      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 800207e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002082:	d00e      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x106>
 8002084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002088:	d82a      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 800208a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800208e:	d008      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x106>
 8002090:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002094:	d824      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x144>
 8002096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800209a:	d002      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x106>
 800209c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020a0:	d11e      	bne.n	80020e0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	60fb      	str	r3, [r7, #12]
        break;
 80020b2:	e016      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	60fb      	str	r3, [r7, #12]
        break;
 80020ba:	e012      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	60fb      	str	r3, [r7, #12]
        break;
 80020c2:	e00e      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	60fb      	str	r3, [r7, #12]
        break;
 80020ca:	e00a      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	09db      	lsrs	r3, r3, #7
 80020d0:	60fb      	str	r3, [r7, #12]
        break;
 80020d2:	e006      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	60fb      	str	r3, [r7, #12]
        break;
 80020da:	e002      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
        break;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80020e0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80020e2:	f7fe fdf1 	bl	8000cc8 <HAL_GetREVID>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d815      	bhi.n	800211c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <ADC_ConfigureBoostMode+0x204>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d908      	bls.n	800210a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002106:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002108:	e03e      	b.n	8002188 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002118:	609a      	str	r2, [r3, #8]
}
 800211a:	e035      	b.n	8002188 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <ADC_ConfigureBoostMode+0x208>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d808      	bhi.n	800213c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002138:	609a      	str	r2, [r3, #8]
}
 800213a:	e025      	b.n	8002188 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <ADC_ConfigureBoostMode+0x20c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d80a      	bhi.n	800215a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	e016      	b.n	8002188 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <ADC_ConfigureBoostMode+0x210>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d80a      	bhi.n	8002178 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002174:	609a      	str	r2, [r3, #8]
}
 8002176:	e007      	b.n	8002188 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40022000 	.word	0x40022000
 8002194:	40022100 	.word	0x40022100
 8002198:	40022300 	.word	0x40022300
 800219c:	58026300 	.word	0x58026300
 80021a0:	01312d00 	.word	0x01312d00
 80021a4:	005f5e10 	.word	0x005f5e10
 80021a8:	00bebc20 	.word	0x00bebc20
 80021ac:	017d7840 	.word	0x017d7840

080021b0 <LL_ADC_IsEnabled>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <LL_ADC_IsEnabled+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_ADC_IsEnabled+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <LL_ADC_StartCalibration>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <LL_ADC_StartCalibration+0x38>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021f8:	430a      	orrs	r2, r1
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	3ffeffc0 	.word	0x3ffeffc0

08002214 <LL_ADC_IsCalibrationOnGoing>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002228:	d101      	bne.n	800222e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_IsConversionOngoing>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b04      	cmp	r3, #4
 800224e:	d101      	bne.n	8002254 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADCEx_Calibration_Start+0x1e>
 800227e:	2302      	movs	r3, #2
 8002280:	e04c      	b.n	800231c <HAL_ADCEx_Calibration_Start+0xb8>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff fd92 	bl	8001db4 <ADC_Disable>
 8002290:	4603      	mov	r3, r0
 8002292:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d135      	bne.n	8002306 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_ADCEx_Calibration_Start+0xc0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff90 	bl	80021d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022b8:	e014      	b.n	80022e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	3301      	adds	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_ADCEx_Calibration_Start+0xc4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d30d      	bcc.n	80022e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f023 0312 	bic.w	r3, r3, #18
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01b      	b.n	800231c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff93 	bl	8002214 <LL_ADC_IsCalibrationOnGoing>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e2      	bne.n	80022ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
 8002304:	e005      	b.n	8002312 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	ffffeefd 	.word	0xffffeefd
 8002328:	25c3f800 	.word	0x25c3f800

0800232c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b09f      	sub	sp, #124	; 0x7c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e0be      	b.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002364:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	e001      	b.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e09d      	b.n	80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff54 	bl	800223c <LL_ADC_REG_IsConversionOngoing>
 8002394:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff4e 	bl	800223c <LL_ADC_REG_IsConversionOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d17f      	bne.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d17c      	bne.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a47      	ldr	r2, [pc, #284]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80023c0:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80023c2:	e000      	b.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80023c4:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80023c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d039      	beq.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	431a      	orrs	r2, r3
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10e      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023f6:	4836      	ldr	r0, [pc, #216]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023f8:	f7ff feda 	bl	80021b0 <LL_ADC_IsEnabled>
 80023fc:	4604      	mov	r4, r0
 80023fe:	4835      	ldr	r0, [pc, #212]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002400:	f7ff fed6 	bl	80021b0 <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	4323      	orrs	r3, r4
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e008      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002414:	4832      	ldr	r0, [pc, #200]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002416:	f7ff fecb 	bl	80021b0 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d047      	beq.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800242a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002430:	4013      	ands	r3, r2
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	6892      	ldr	r2, [r2, #8]
 800243a:	430a      	orrs	r2, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002442:	e03a      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d10e      	bne.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002464:	481a      	ldr	r0, [pc, #104]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002466:	f7ff fea3 	bl	80021b0 <LL_ADC_IsEnabled>
 800246a:	4604      	mov	r4, r0
 800246c:	4819      	ldr	r0, [pc, #100]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800246e:	f7ff fe9f 	bl	80021b0 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	4323      	orrs	r3, r4
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e008      	b.n	8002494 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002484:	f7ff fe94 	bl	80021b0 <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800249e:	4013      	ands	r3, r2
 80024a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024a4:	e009      	b.n	80024ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024b8:	e000      	b.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	377c      	adds	r7, #124	; 0x7c
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40022100 	.word	0x40022100
 80024d8:	40022300 	.word	0x40022300
 80024dc:	58026300 	.word	0x58026300
 80024e0:	58026000 	.word	0x58026000
 80024e4:	fffff0e0 	.word	0xfffff0e0

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <__NVIC_SetPriorityGrouping+0x40>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	4313      	orrs	r3, r2
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x40>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00
 800252c:	05fa0000 	.word	0x05fa0000

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ff8e 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff29 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff40 	bl	8002530 <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff90 	bl	80025dc <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5f 	bl	8002588 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff33 	bl	800254c <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa4 	bl	8002644 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7fe face 	bl	8000cb0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e316      	b.n	8002d4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a66      	ldr	r2, [pc, #408]	; (80028c0 <HAL_DMA_Init+0x1b8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04a      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_DMA_Init+0x1bc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d045      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_DMA_Init+0x1c0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d040      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a62      	ldr	r2, [pc, #392]	; (80028cc <HAL_DMA_Init+0x1c4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d03b      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <HAL_DMA_Init+0x1c8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d036      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a5f      	ldr	r2, [pc, #380]	; (80028d4 <HAL_DMA_Init+0x1cc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d031      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <HAL_DMA_Init+0x1d0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02c      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_DMA_Init+0x1d4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d027      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5a      	ldr	r2, [pc, #360]	; (80028e0 <HAL_DMA_Init+0x1d8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d022      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a59      	ldr	r2, [pc, #356]	; (80028e4 <HAL_DMA_Init+0x1dc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d01d      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_DMA_Init+0x1e0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d018      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a56      	ldr	r2, [pc, #344]	; (80028ec <HAL_DMA_Init+0x1e4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_DMA_Init+0x1e8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a53      	ldr	r2, [pc, #332]	; (80028f4 <HAL_DMA_Init+0x1ec>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a51      	ldr	r2, [pc, #324]	; (80028f8 <HAL_DMA_Init+0x1f0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_DMA_Init+0xb8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_DMA_Init+0x1f4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_DMA_Init+0xbc>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_Init+0xbe>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 813b 	beq.w	8002a42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_DMA_Init+0x1b8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Init+0x174>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a36      	ldr	r2, [pc, #216]	; (80028c4 <HAL_DMA_Init+0x1bc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Init+0x174>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_DMA_Init+0x1c0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Init+0x174>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_DMA_Init+0x1c4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_DMA_Init+0x1c8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Init+0x174>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <HAL_DMA_Init+0x1cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_DMA_Init+0x1d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_DMA_Init+0x1d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Init+0x174>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_DMA_Init+0x1d8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_DMA_Init+0x1dc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_DMA_Init+0x1e0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Init+0x174>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a27      	ldr	r2, [pc, #156]	; (80028ec <HAL_DMA_Init+0x1e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <HAL_DMA_Init+0x1e8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Init+0x174>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <HAL_DMA_Init+0x1ec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_Init+0x1f0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Init+0x174>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_DMA_Init+0x1f4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <HAL_DMA_Init+0x186>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e007      	b.n	800289e <HAL_DMA_Init+0x196>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800289e:	e02f      	b.n	8002900 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a0:	f7fe fa06 	bl	8000cb0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d928      	bls.n	8002900 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e246      	b.n	8002d4e <HAL_DMA_Init+0x646>
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1c8      	bne.n	80028a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <HAL_DMA_Init+0x420>)
 800291a:	4013      	ands	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002926:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2b04      	cmp	r3, #4
 8002952:	d107      	bne.n	8002964 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	4313      	orrs	r3, r2
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002964:	4b71      	ldr	r3, [pc, #452]	; (8002b2c <HAL_DMA_Init+0x424>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b71      	ldr	r3, [pc, #452]	; (8002b30 <HAL_DMA_Init+0x428>)
 800296a:	4013      	ands	r3, r2
 800296c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002970:	d328      	bcc.n	80029c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b28      	cmp	r3, #40	; 0x28
 8002978:	d903      	bls.n	8002982 <HAL_DMA_Init+0x27a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b2e      	cmp	r3, #46	; 0x2e
 8002980:	d917      	bls.n	80029b2 <HAL_DMA_Init+0x2aa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b3e      	cmp	r3, #62	; 0x3e
 8002988:	d903      	bls.n	8002992 <HAL_DMA_Init+0x28a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b42      	cmp	r3, #66	; 0x42
 8002990:	d90f      	bls.n	80029b2 <HAL_DMA_Init+0x2aa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b46      	cmp	r3, #70	; 0x46
 8002998:	d903      	bls.n	80029a2 <HAL_DMA_Init+0x29a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b48      	cmp	r3, #72	; 0x48
 80029a0:	d907      	bls.n	80029b2 <HAL_DMA_Init+0x2aa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b4e      	cmp	r3, #78	; 0x4e
 80029a8:	d905      	bls.n	80029b6 <HAL_DMA_Init+0x2ae>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b52      	cmp	r3, #82	; 0x52
 80029b0:	d801      	bhi.n	80029b6 <HAL_DMA_Init+0x2ae>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_Init+0x2b0>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0307 	bic.w	r3, r3, #7
 80029da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d117      	bne.n	8002a1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f001 fdcf 	bl	80045a4 <DMA_CheckFifoParam>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e197      	b.n	8002d4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f001 fd0a 	bl	8004440 <DMA_CalcBaseAndBitshift>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e0cd      	b.n	8002bde <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <HAL_DMA_Init+0x42c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_DMA_Init+0x430>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <HAL_DMA_Init+0x434>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a36      	ldr	r2, [pc, #216]	; (8002b40 <HAL_DMA_Init+0x438>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a35      	ldr	r2, [pc, #212]	; (8002b44 <HAL_DMA_Init+0x43c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_DMA_Init+0x440>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a32      	ldr	r2, [pc, #200]	; (8002b4c <HAL_DMA_Init+0x444>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_Init+0x38a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_DMA_Init+0x448>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_Init+0x38e>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_DMA_Init+0x390>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8097 	beq.w	8002bcc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <HAL_DMA_Init+0x42c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d021      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Init+0x430>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01c      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_DMA_Init+0x434>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d017      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_DMA_Init+0x438>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d012      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_DMA_Init+0x43c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00d      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_DMA_Init+0x440>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d008      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_DMA_Init+0x444>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_Init+0x3e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_DMA_Init+0x448>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_DMA_Init+0x44c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d020      	beq.n	8002b58 <HAL_DMA_Init+0x450>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d102      	bne.n	8002b24 <HAL_DMA_Init+0x41c>
 8002b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b22:	e01a      	b.n	8002b5a <HAL_DMA_Init+0x452>
 8002b24:	2300      	movs	r3, #0
 8002b26:	e018      	b.n	8002b5a <HAL_DMA_Init+0x452>
 8002b28:	fe10803f 	.word	0xfe10803f
 8002b2c:	5c001000 	.word	0x5c001000
 8002b30:	ffff0000 	.word	0xffff0000
 8002b34:	58025408 	.word	0x58025408
 8002b38:	5802541c 	.word	0x5802541c
 8002b3c:	58025430 	.word	0x58025430
 8002b40:	58025444 	.word	0x58025444
 8002b44:	58025458 	.word	0x58025458
 8002b48:	5802546c 	.word	0x5802546c
 8002b4c:	58025480 	.word	0x58025480
 8002b50:	58025494 	.word	0x58025494
 8002b54:	fffe000f 	.word	0xfffe000f
 8002b58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	; (8002d58 <HAL_DMA_Init+0x650>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_DMA_Init+0x654>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	009a      	lsls	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f001 fc45 	bl	8004440 <DMA_CalcBaseAndBitshift>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e008      	b.n	8002bde <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0b7      	b.n	8002d4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5f      	ldr	r2, [pc, #380]	; (8002d60 <HAL_DMA_Init+0x658>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d072      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_DMA_Init+0x65c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d06d      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_DMA_Init+0x660>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d068      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5a      	ldr	r2, [pc, #360]	; (8002d6c <HAL_DMA_Init+0x664>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d063      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a59      	ldr	r2, [pc, #356]	; (8002d70 <HAL_DMA_Init+0x668>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d05e      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_DMA_Init+0x66c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d059      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_DMA_Init+0x670>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d054      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a54      	ldr	r2, [pc, #336]	; (8002d7c <HAL_DMA_Init+0x674>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04f      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a53      	ldr	r2, [pc, #332]	; (8002d80 <HAL_DMA_Init+0x678>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_DMA_Init+0x67c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_DMA_Init+0x680>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a4e      	ldr	r2, [pc, #312]	; (8002d8c <HAL_DMA_Init+0x684>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <HAL_DMA_Init+0x688>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_DMA_Init+0x68c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_DMA_Init+0x690>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_DMA_Init+0x694>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a47      	ldr	r2, [pc, #284]	; (8002da0 <HAL_DMA_Init+0x698>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <HAL_DMA_Init+0x69c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a44      	ldr	r2, [pc, #272]	; (8002da8 <HAL_DMA_Init+0x6a0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a42      	ldr	r2, [pc, #264]	; (8002dac <HAL_DMA_Init+0x6a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_DMA_Init+0x6a8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3f      	ldr	r2, [pc, #252]	; (8002db4 <HAL_DMA_Init+0x6ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <HAL_DMA_Init+0x6b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Init+0x5c6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_DMA_Init+0x6b4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Init+0x5ca>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_Init+0x5cc>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d032      	beq.n	8002d3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f001 fcdf 	bl	800469c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b80      	cmp	r3, #128	; 0x80
 8002ce4:	d102      	bne.n	8002cec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_DMA_Init+0x624>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d80c      	bhi.n	8002d2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f001 fd5c 	bl	80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	e008      	b.n	8002d3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	a7fdabf8 	.word	0xa7fdabf8
 8002d5c:	cccccccd 	.word	0xcccccccd
 8002d60:	40020010 	.word	0x40020010
 8002d64:	40020028 	.word	0x40020028
 8002d68:	40020040 	.word	0x40020040
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	40020070 	.word	0x40020070
 8002d74:	40020088 	.word	0x40020088
 8002d78:	400200a0 	.word	0x400200a0
 8002d7c:	400200b8 	.word	0x400200b8
 8002d80:	40020410 	.word	0x40020410
 8002d84:	40020428 	.word	0x40020428
 8002d88:	40020440 	.word	0x40020440
 8002d8c:	40020458 	.word	0x40020458
 8002d90:	40020470 	.word	0x40020470
 8002d94:	40020488 	.word	0x40020488
 8002d98:	400204a0 	.word	0x400204a0
 8002d9c:	400204b8 	.word	0x400204b8
 8002da0:	58025408 	.word	0x58025408
 8002da4:	5802541c 	.word	0x5802541c
 8002da8:	58025430 	.word	0x58025430
 8002dac:	58025444 	.word	0x58025444
 8002db0:	58025458 	.word	0x58025458
 8002db4:	5802546c 	.word	0x5802546c
 8002db8:	58025480 	.word	0x58025480
 8002dbc:	58025494 	.word	0x58025494

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e226      	b.n	800322a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Start_IT+0x2a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e21f      	b.n	800322a <HAL_DMA_Start_IT+0x46a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	f040 820a 	bne.w	8003214 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a68      	ldr	r2, [pc, #416]	; (8002fb4 <HAL_DMA_Start_IT+0x1f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <HAL_DMA_Start_IT+0x1f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a65      	ldr	r2, [pc, #404]	; (8002fbc <HAL_DMA_Start_IT+0x1fc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a63      	ldr	r2, [pc, #396]	; (8002fc0 <HAL_DMA_Start_IT+0x200>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a62      	ldr	r2, [pc, #392]	; (8002fc4 <HAL_DMA_Start_IT+0x204>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <HAL_DMA_Start_IT+0x208>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <HAL_DMA_Start_IT+0x20c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5d      	ldr	r2, [pc, #372]	; (8002fd0 <HAL_DMA_Start_IT+0x210>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <HAL_DMA_Start_IT+0x214>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5a      	ldr	r2, [pc, #360]	; (8002fd8 <HAL_DMA_Start_IT+0x218>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a59      	ldr	r2, [pc, #356]	; (8002fdc <HAL_DMA_Start_IT+0x21c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_DMA_Start_IT+0x220>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_DMA_Start_IT+0x224>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_DMA_Start_IT+0x228>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a53      	ldr	r2, [pc, #332]	; (8002fec <HAL_DMA_Start_IT+0x22c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Start_IT+0xee>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a51      	ldr	r2, [pc, #324]	; (8002ff0 <HAL_DMA_Start_IT+0x230>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d108      	bne.n	8002ec0 <HAL_DMA_Start_IT+0x100>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e007      	b.n	8002ed0 <HAL_DMA_Start_IT+0x110>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f001 f906 	bl	80040e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_DMA_Start_IT+0x1f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_DMA_Start_IT+0x1f8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d045      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_DMA_Start_IT+0x1fc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a30      	ldr	r2, [pc, #192]	; (8002fc0 <HAL_DMA_Start_IT+0x200>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03b      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <HAL_DMA_Start_IT+0x204>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2d      	ldr	r2, [pc, #180]	; (8002fc8 <HAL_DMA_Start_IT+0x208>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d031      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_DMA_Start_IT+0x20c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <HAL_DMA_Start_IT+0x210>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d027      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_DMA_Start_IT+0x214>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_DMA_Start_IT+0x218>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01d      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_DMA_Start_IT+0x21c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <HAL_DMA_Start_IT+0x220>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_DMA_Start_IT+0x224>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_DMA_Start_IT+0x228>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_DMA_Start_IT+0x22c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Start_IT+0x1bc>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <HAL_DMA_Start_IT+0x230>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Start_IT+0x1c0>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_Start_IT+0x1c2>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d036      	beq.n	8002ff4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 021e 	bic.w	r2, r3, #30
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0216 	orr.w	r2, r2, #22
 8002f98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d03e      	beq.n	8003020 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0208 	orr.w	r2, r2, #8
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e035      	b.n	8003020 <HAL_DMA_Start_IT+0x260>
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 020e 	bic.w	r2, r3, #14
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 020a 	orr.w	r2, r2, #10
 8003006:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0204 	orr.w	r2, r2, #4
 800301e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a83      	ldr	r2, [pc, #524]	; (8003234 <HAL_DMA_Start_IT+0x474>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d072      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a82      	ldr	r2, [pc, #520]	; (8003238 <HAL_DMA_Start_IT+0x478>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d06d      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a80      	ldr	r2, [pc, #512]	; (800323c <HAL_DMA_Start_IT+0x47c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d068      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7f      	ldr	r2, [pc, #508]	; (8003240 <HAL_DMA_Start_IT+0x480>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d063      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7d      	ldr	r2, [pc, #500]	; (8003244 <HAL_DMA_Start_IT+0x484>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d05e      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <HAL_DMA_Start_IT+0x488>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d059      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a7a      	ldr	r2, [pc, #488]	; (800324c <HAL_DMA_Start_IT+0x48c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d054      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a79      	ldr	r2, [pc, #484]	; (8003250 <HAL_DMA_Start_IT+0x490>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04f      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a77      	ldr	r2, [pc, #476]	; (8003254 <HAL_DMA_Start_IT+0x494>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04a      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a76      	ldr	r2, [pc, #472]	; (8003258 <HAL_DMA_Start_IT+0x498>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d045      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a74      	ldr	r2, [pc, #464]	; (800325c <HAL_DMA_Start_IT+0x49c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d040      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a73      	ldr	r2, [pc, #460]	; (8003260 <HAL_DMA_Start_IT+0x4a0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d03b      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a71      	ldr	r2, [pc, #452]	; (8003264 <HAL_DMA_Start_IT+0x4a4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d036      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a70      	ldr	r2, [pc, #448]	; (8003268 <HAL_DMA_Start_IT+0x4a8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d031      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6e      	ldr	r2, [pc, #440]	; (800326c <HAL_DMA_Start_IT+0x4ac>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02c      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6d      	ldr	r2, [pc, #436]	; (8003270 <HAL_DMA_Start_IT+0x4b0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d027      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6b      	ldr	r2, [pc, #428]	; (8003274 <HAL_DMA_Start_IT+0x4b4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6a      	ldr	r2, [pc, #424]	; (8003278 <HAL_DMA_Start_IT+0x4b8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01d      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a68      	ldr	r2, [pc, #416]	; (800327c <HAL_DMA_Start_IT+0x4bc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_DMA_Start_IT+0x4c0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_DMA_Start_IT+0x4c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a64      	ldr	r2, [pc, #400]	; (8003288 <HAL_DMA_Start_IT+0x4c8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_DMA_Start_IT+0x4cc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_Start_IT+0x350>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_DMA_Start_IT+0x4d0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Start_IT+0x354>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_DMA_Start_IT+0x356>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01a      	beq.n	8003150 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003136:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_DMA_Start_IT+0x474>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a36      	ldr	r2, [pc, #216]	; (8003238 <HAL_DMA_Start_IT+0x478>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d045      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_DMA_Start_IT+0x47c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d040      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a33      	ldr	r2, [pc, #204]	; (8003240 <HAL_DMA_Start_IT+0x480>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d03b      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_DMA_Start_IT+0x484>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a30      	ldr	r2, [pc, #192]	; (8003248 <HAL_DMA_Start_IT+0x488>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_DMA_Start_IT+0x48c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_DMA_Start_IT+0x490>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d027      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <HAL_DMA_Start_IT+0x494>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_DMA_Start_IT+0x498>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <HAL_DMA_Start_IT+0x49c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_DMA_Start_IT+0x4a0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_DMA_Start_IT+0x4a4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a24      	ldr	r2, [pc, #144]	; (8003268 <HAL_DMA_Start_IT+0x4a8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a22      	ldr	r2, [pc, #136]	; (800326c <HAL_DMA_Start_IT+0x4ac>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_Start_IT+0x430>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_DMA_Start_IT+0x4b0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <HAL_DMA_Start_IT+0x442>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e012      	b.n	8003228 <HAL_DMA_Start_IT+0x468>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e009      	b.n	8003228 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40020010 	.word	0x40020010
 8003238:	40020028 	.word	0x40020028
 800323c:	40020040 	.word	0x40020040
 8003240:	40020058 	.word	0x40020058
 8003244:	40020070 	.word	0x40020070
 8003248:	40020088 	.word	0x40020088
 800324c:	400200a0 	.word	0x400200a0
 8003250:	400200b8 	.word	0x400200b8
 8003254:	40020410 	.word	0x40020410
 8003258:	40020428 	.word	0x40020428
 800325c:	40020440 	.word	0x40020440
 8003260:	40020458 	.word	0x40020458
 8003264:	40020470 	.word	0x40020470
 8003268:	40020488 	.word	0x40020488
 800326c:	400204a0 	.word	0x400204a0
 8003270:	400204b8 	.word	0x400204b8
 8003274:	58025408 	.word	0x58025408
 8003278:	5802541c 	.word	0x5802541c
 800327c:	58025430 	.word	0x58025430
 8003280:	58025444 	.word	0x58025444
 8003284:	58025458 	.word	0x58025458
 8003288:	5802546c 	.word	0x5802546c
 800328c:	58025480 	.word	0x58025480
 8003290:	58025494 	.word	0x58025494

08003294 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032a0:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_DMA_IRQHandler+0x1ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_DMA_IRQHandler+0x1b0>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5f      	ldr	r2, [pc, #380]	; (8003448 <HAL_DMA_IRQHandler+0x1b4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d04a      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5d      	ldr	r2, [pc, #372]	; (800344c <HAL_DMA_IRQHandler+0x1b8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d045      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a5c      	ldr	r2, [pc, #368]	; (8003450 <HAL_DMA_IRQHandler+0x1bc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d040      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5a      	ldr	r2, [pc, #360]	; (8003454 <HAL_DMA_IRQHandler+0x1c0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03b      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a59      	ldr	r2, [pc, #356]	; (8003458 <HAL_DMA_IRQHandler+0x1c4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d036      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_DMA_IRQHandler+0x1c8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d031      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a56      	ldr	r2, [pc, #344]	; (8003460 <HAL_DMA_IRQHandler+0x1cc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02c      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_DMA_IRQHandler+0x1d0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d027      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a53      	ldr	r2, [pc, #332]	; (8003468 <HAL_DMA_IRQHandler+0x1d4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a51      	ldr	r2, [pc, #324]	; (800346c <HAL_DMA_IRQHandler+0x1d8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01d      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a50      	ldr	r2, [pc, #320]	; (8003470 <HAL_DMA_IRQHandler+0x1dc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_DMA_IRQHandler+0x1e0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a4d      	ldr	r2, [pc, #308]	; (8003478 <HAL_DMA_IRQHandler+0x1e4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_DMA_IRQHandler+0x1e8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <HAL_DMA_IRQHandler+0x1ec>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_IRQHandler+0xd2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a48      	ldr	r2, [pc, #288]	; (8003484 <HAL_DMA_IRQHandler+0x1f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_DMA_IRQHandler+0xd6>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_DMA_IRQHandler+0xd8>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 842b 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2208      	movs	r2, #8
 800337c:	409a      	lsls	r2, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a2 	beq.w	80034cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_DMA_IRQHandler+0x1b4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_DMA_IRQHandler+0x1b8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <HAL_DMA_IRQHandler+0x1bc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_DMA_IRQHandler+0x1c0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <HAL_DMA_IRQHandler+0x1c4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a27      	ldr	r2, [pc, #156]	; (800345c <HAL_DMA_IRQHandler+0x1c8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_DMA_IRQHandler+0x1cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_DMA_IRQHandler+0x1d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_DMA_IRQHandler+0x1d4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_DMA_IRQHandler+0x1d8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_DMA_IRQHandler+0x1dc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <HAL_DMA_IRQHandler+0x1e0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_DMA_IRQHandler+0x1e4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <HAL_DMA_IRQHandler+0x1e8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_DMA_IRQHandler+0x1ec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_IRQHandler+0x194>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_DMA_IRQHandler+0x1f0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d12f      	bne.n	8003488 <HAL_DMA_IRQHandler+0x1f4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e02e      	b.n	800349c <HAL_DMA_IRQHandler+0x208>
 800343e:	bf00      	nop
 8003440:	24000000 	.word	0x24000000
 8003444:	1b4e81b5 	.word	0x1b4e81b5
 8003448:	40020010 	.word	0x40020010
 800344c:	40020028 	.word	0x40020028
 8003450:	40020040 	.word	0x40020040
 8003454:	40020058 	.word	0x40020058
 8003458:	40020070 	.word	0x40020070
 800345c:	40020088 	.word	0x40020088
 8003460:	400200a0 	.word	0x400200a0
 8003464:	400200b8 	.word	0x400200b8
 8003468:	40020410 	.word	0x40020410
 800346c:	40020428 	.word	0x40020428
 8003470:	40020440 	.word	0x40020440
 8003474:	40020458 	.word	0x40020458
 8003478:	40020470 	.word	0x40020470
 800347c:	40020488 	.word	0x40020488
 8003480:	400204a0 	.word	0x400204a0
 8003484:	400204b8 	.word	0x400204b8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf14      	ite	ne
 8003496:	2301      	movne	r3, #1
 8003498:	2300      	moveq	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2208      	movs	r2, #8
 80034ba:	409a      	lsls	r2, r3
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d06e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_DMA_IRQHandler+0x3f8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_DMA_IRQHandler+0x3fc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a66      	ldr	r2, [pc, #408]	; (8003694 <HAL_DMA_IRQHandler+0x400>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a64      	ldr	r2, [pc, #400]	; (8003698 <HAL_DMA_IRQHandler+0x404>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a63      	ldr	r2, [pc, #396]	; (800369c <HAL_DMA_IRQHandler+0x408>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a61      	ldr	r2, [pc, #388]	; (80036a0 <HAL_DMA_IRQHandler+0x40c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a60      	ldr	r2, [pc, #384]	; (80036a4 <HAL_DMA_IRQHandler+0x410>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_DMA_IRQHandler+0x414>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5d      	ldr	r2, [pc, #372]	; (80036ac <HAL_DMA_IRQHandler+0x418>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5b      	ldr	r2, [pc, #364]	; (80036b0 <HAL_DMA_IRQHandler+0x41c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a5a      	ldr	r2, [pc, #360]	; (80036b4 <HAL_DMA_IRQHandler+0x420>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_DMA_IRQHandler+0x424>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a57      	ldr	r2, [pc, #348]	; (80036bc <HAL_DMA_IRQHandler+0x428>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_DMA_IRQHandler+0x42c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a54      	ldr	r2, [pc, #336]	; (80036c4 <HAL_DMA_IRQHandler+0x430>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2ee>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_DMA_IRQHandler+0x434>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10a      	bne.n	8003598 <HAL_DMA_IRQHandler+0x304>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e003      	b.n	80035a0 <HAL_DMA_IRQHandler+0x30c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2201      	movs	r2, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0202 	orr.w	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2204      	movs	r2, #4
 80035ca:	409a      	lsls	r2, r3
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 808f 	beq.w	80036f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_DMA_IRQHandler+0x3f8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04a      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <HAL_DMA_IRQHandler+0x3fc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d045      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a29      	ldr	r2, [pc, #164]	; (8003694 <HAL_DMA_IRQHandler+0x400>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d040      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <HAL_DMA_IRQHandler+0x404>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d03b      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_DMA_IRQHandler+0x408>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d036      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <HAL_DMA_IRQHandler+0x40c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d031      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <HAL_DMA_IRQHandler+0x410>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d02c      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <HAL_DMA_IRQHandler+0x414>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d027      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a20      	ldr	r2, [pc, #128]	; (80036ac <HAL_DMA_IRQHandler+0x418>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_DMA_IRQHandler+0x41c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01d      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_DMA_IRQHandler+0x420>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d018      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_DMA_IRQHandler+0x424>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_DMA_IRQHandler+0x428>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_DMA_IRQHandler+0x42c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_DMA_IRQHandler+0x430>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_DMA_IRQHandler+0x3e2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <HAL_DMA_IRQHandler+0x434>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12a      	bne.n	80036cc <HAL_DMA_IRQHandler+0x438>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e023      	b.n	80036d4 <HAL_DMA_IRQHandler+0x440>
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2204      	movs	r2, #4
 80036e2:	409a      	lsls	r2, r3
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2210      	movs	r2, #16
 80036fe:	409a      	lsls	r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a6 	beq.w	8003856 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a85      	ldr	r2, [pc, #532]	; (8003924 <HAL_DMA_IRQHandler+0x690>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04a      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_DMA_IRQHandler+0x694>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d045      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a82      	ldr	r2, [pc, #520]	; (800392c <HAL_DMA_IRQHandler+0x698>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d040      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a80      	ldr	r2, [pc, #512]	; (8003930 <HAL_DMA_IRQHandler+0x69c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d03b      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7f      	ldr	r2, [pc, #508]	; (8003934 <HAL_DMA_IRQHandler+0x6a0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d036      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a7d      	ldr	r2, [pc, #500]	; (8003938 <HAL_DMA_IRQHandler+0x6a4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d031      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7c      	ldr	r2, [pc, #496]	; (800393c <HAL_DMA_IRQHandler+0x6a8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d02c      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_DMA_IRQHandler+0x6ac>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d027      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a79      	ldr	r2, [pc, #484]	; (8003944 <HAL_DMA_IRQHandler+0x6b0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a77      	ldr	r2, [pc, #476]	; (8003948 <HAL_DMA_IRQHandler+0x6b4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01d      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a76      	ldr	r2, [pc, #472]	; (800394c <HAL_DMA_IRQHandler+0x6b8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a74      	ldr	r2, [pc, #464]	; (8003950 <HAL_DMA_IRQHandler+0x6bc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	; (8003954 <HAL_DMA_IRQHandler+0x6c0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a71      	ldr	r2, [pc, #452]	; (8003958 <HAL_DMA_IRQHandler+0x6c4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a70      	ldr	r2, [pc, #448]	; (800395c <HAL_DMA_IRQHandler+0x6c8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_DMA_IRQHandler+0x516>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_DMA_IRQHandler+0x6cc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10a      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x52c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e009      	b.n	80037d4 <HAL_DMA_IRQHandler+0x540>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf14      	ite	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	2300      	moveq	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d03e      	beq.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	2210      	movs	r2, #16
 80037e2:	409a      	lsls	r2, r3
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d024      	beq.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	e01f      	b.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01b      	beq.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
 8003826:	e016      	b.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2220      	movs	r2, #32
 8003860:	409a      	lsls	r2, r3
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8110 	beq.w	8003a8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <HAL_DMA_IRQHandler+0x690>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <HAL_DMA_IRQHandler+0x694>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_DMA_IRQHandler+0x698>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_DMA_IRQHandler+0x69c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <HAL_DMA_IRQHandler+0x6a0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a25      	ldr	r2, [pc, #148]	; (8003938 <HAL_DMA_IRQHandler+0x6a4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_DMA_IRQHandler+0x6a8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a22      	ldr	r2, [pc, #136]	; (8003940 <HAL_DMA_IRQHandler+0x6ac>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_DMA_IRQHandler+0x6b0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_DMA_IRQHandler+0x6b4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_DMA_IRQHandler+0x6b8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_DMA_IRQHandler+0x6bc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_DMA_IRQHandler+0x6c0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_DMA_IRQHandler+0x6c4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_DMA_IRQHandler+0x6c8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_IRQHandler+0x678>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_DMA_IRQHandler+0x6cc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d12b      	bne.n	8003964 <HAL_DMA_IRQHandler+0x6d0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e02a      	b.n	8003978 <HAL_DMA_IRQHandler+0x6e4>
 8003922:	bf00      	nop
 8003924:	40020010 	.word	0x40020010
 8003928:	40020028 	.word	0x40020028
 800392c:	40020040 	.word	0x40020040
 8003930:	40020058 	.word	0x40020058
 8003934:	40020070 	.word	0x40020070
 8003938:	40020088 	.word	0x40020088
 800393c:	400200a0 	.word	0x400200a0
 8003940:	400200b8 	.word	0x400200b8
 8003944:	40020410 	.word	0x40020410
 8003948:	40020428 	.word	0x40020428
 800394c:	40020440 	.word	0x40020440
 8003950:	40020458 	.word	0x40020458
 8003954:	40020470 	.word	0x40020470
 8003958:	40020488 	.word	0x40020488
 800395c:	400204a0 	.word	0x400204a0
 8003960:	400204b8 	.word	0x400204b8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8087 	beq.w	8003a8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2220      	movs	r2, #32
 8003988:	409a      	lsls	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b04      	cmp	r3, #4
 8003998:	d139      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0216 	bic.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_DMA_IRQHandler+0x736>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	223f      	movs	r2, #63	; 0x3f
 80039e4:	409a      	lsls	r2, r3
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 834a 	beq.w	8004098 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
          }
          return;
 8003a0c:	e344      	b.n	8004098 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02c      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
 8003a3a:	e027      	b.n	8003a8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d023      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
 8003a4c:	e01e      	b.n	8003a8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10f      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0210 	bic.w	r2, r2, #16
 8003a6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8306 	beq.w	80040a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8088 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7a      	ldr	r2, [pc, #488]	; (8003c9c <HAL_DMA_IRQHandler+0xa08>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a79      	ldr	r2, [pc, #484]	; (8003ca0 <HAL_DMA_IRQHandler+0xa0c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d045      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a77      	ldr	r2, [pc, #476]	; (8003ca4 <HAL_DMA_IRQHandler+0xa10>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d040      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a76      	ldr	r2, [pc, #472]	; (8003ca8 <HAL_DMA_IRQHandler+0xa14>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03b      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a74      	ldr	r2, [pc, #464]	; (8003cac <HAL_DMA_IRQHandler+0xa18>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d036      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a73      	ldr	r2, [pc, #460]	; (8003cb0 <HAL_DMA_IRQHandler+0xa1c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a71      	ldr	r2, [pc, #452]	; (8003cb4 <HAL_DMA_IRQHandler+0xa20>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02c      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <HAL_DMA_IRQHandler+0xa24>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d027      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_DMA_IRQHandler+0xa28>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6d      	ldr	r2, [pc, #436]	; (8003cc0 <HAL_DMA_IRQHandler+0xa2c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01d      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	; (8003cc4 <HAL_DMA_IRQHandler+0xa30>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_DMA_IRQHandler+0xa34>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	; (8003ccc <HAL_DMA_IRQHandler+0xa38>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <HAL_DMA_IRQHandler+0xa3c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_DMA_IRQHandler+0xa40>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x8b8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a64      	ldr	r2, [pc, #400]	; (8003cd8 <HAL_DMA_IRQHandler+0xa44>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <HAL_DMA_IRQHandler+0x8ca>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e007      	b.n	8003b6e <HAL_DMA_IRQHandler+0x8da>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d307      	bcc.n	8003b8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f2      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x8da>
 8003b88:	e000      	b.n	8003b8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ba2:	e003      	b.n	8003bac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8272 	beq.w	80040a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
 8003bc6:	e26c      	b.n	80040a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <HAL_DMA_IRQHandler+0xa48>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d022      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a42      	ldr	r2, [pc, #264]	; (8003ce0 <HAL_DMA_IRQHandler+0xa4c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d01d      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a40      	ldr	r2, [pc, #256]	; (8003ce4 <HAL_DMA_IRQHandler+0xa50>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <HAL_DMA_IRQHandler+0xa54>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3d      	ldr	r2, [pc, #244]	; (8003cec <HAL_DMA_IRQHandler+0xa58>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3c      	ldr	r2, [pc, #240]	; (8003cf0 <HAL_DMA_IRQHandler+0xa5c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3a      	ldr	r2, [pc, #232]	; (8003cf4 <HAL_DMA_IRQHandler+0xa60>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x984>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <HAL_DMA_IRQHandler+0xa64>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x988>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_DMA_IRQHandler+0x98a>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 823f 	beq.w	80040a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2204      	movs	r2, #4
 8003c36:	409a      	lsls	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80cd 	beq.w	8003ddc <HAL_DMA_IRQHandler+0xb48>
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80c7 	beq.w	8003ddc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2204      	movs	r2, #4
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d049      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8210 	beq.w	800409c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c84:	e20a      	b.n	800409c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8206 	beq.w	800409c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c98:	e200      	b.n	800409c <HAL_DMA_IRQHandler+0xe08>
 8003c9a:	bf00      	nop
 8003c9c:	40020010 	.word	0x40020010
 8003ca0:	40020028 	.word	0x40020028
 8003ca4:	40020040 	.word	0x40020040
 8003ca8:	40020058 	.word	0x40020058
 8003cac:	40020070 	.word	0x40020070
 8003cb0:	40020088 	.word	0x40020088
 8003cb4:	400200a0 	.word	0x400200a0
 8003cb8:	400200b8 	.word	0x400200b8
 8003cbc:	40020410 	.word	0x40020410
 8003cc0:	40020428 	.word	0x40020428
 8003cc4:	40020440 	.word	0x40020440
 8003cc8:	40020458 	.word	0x40020458
 8003ccc:	40020470 	.word	0x40020470
 8003cd0:	40020488 	.word	0x40020488
 8003cd4:	400204a0 	.word	0x400204a0
 8003cd8:	400204b8 	.word	0x400204b8
 8003cdc:	58025408 	.word	0x58025408
 8003ce0:	5802541c 	.word	0x5802541c
 8003ce4:	58025430 	.word	0x58025430
 8003ce8:	58025444 	.word	0x58025444
 8003cec:	58025458 	.word	0x58025458
 8003cf0:	5802546c 	.word	0x5802546c
 8003cf4:	58025480 	.word	0x58025480
 8003cf8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d160      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a8c      	ldr	r2, [pc, #560]	; (8003f3c <HAL_DMA_IRQHandler+0xca8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04a      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a8a      	ldr	r2, [pc, #552]	; (8003f40 <HAL_DMA_IRQHandler+0xcac>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d045      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a89      	ldr	r2, [pc, #548]	; (8003f44 <HAL_DMA_IRQHandler+0xcb0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a87      	ldr	r2, [pc, #540]	; (8003f48 <HAL_DMA_IRQHandler+0xcb4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a86      	ldr	r2, [pc, #536]	; (8003f4c <HAL_DMA_IRQHandler+0xcb8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d036      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a84      	ldr	r2, [pc, #528]	; (8003f50 <HAL_DMA_IRQHandler+0xcbc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a83      	ldr	r2, [pc, #524]	; (8003f54 <HAL_DMA_IRQHandler+0xcc0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d02c      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a81      	ldr	r2, [pc, #516]	; (8003f58 <HAL_DMA_IRQHandler+0xcc4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d027      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a80      	ldr	r2, [pc, #512]	; (8003f5c <HAL_DMA_IRQHandler+0xcc8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a7e      	ldr	r2, [pc, #504]	; (8003f60 <HAL_DMA_IRQHandler+0xccc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7d      	ldr	r2, [pc, #500]	; (8003f64 <HAL_DMA_IRQHandler+0xcd0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7b      	ldr	r2, [pc, #492]	; (8003f68 <HAL_DMA_IRQHandler+0xcd4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_DMA_IRQHandler+0xcd8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a78      	ldr	r2, [pc, #480]	; (8003f70 <HAL_DMA_IRQHandler+0xcdc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a77      	ldr	r2, [pc, #476]	; (8003f74 <HAL_DMA_IRQHandler+0xce0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xb12>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a75      	ldr	r2, [pc, #468]	; (8003f78 <HAL_DMA_IRQHandler+0xce4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <HAL_DMA_IRQHandler+0xb24>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0208 	bic.w	r2, r2, #8
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xb34>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8165 	beq.w	800409c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dda:	e15f      	b.n	800409c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2202      	movs	r2, #2
 8003de6:	409a      	lsls	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80c5 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xce8>
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80bf 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2202      	movs	r2, #2
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 813a 	beq.w	80040a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e34:	e134      	b.n	80040a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8130 	beq.w	80040a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e48:	e12a      	b.n	80040a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d168      	bne.n	8003f26 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <HAL_DMA_IRQHandler+0xca8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d04a      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a37      	ldr	r2, [pc, #220]	; (8003f40 <HAL_DMA_IRQHandler+0xcac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d045      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a35      	ldr	r2, [pc, #212]	; (8003f44 <HAL_DMA_IRQHandler+0xcb0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <HAL_DMA_IRQHandler+0xcb4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a32      	ldr	r2, [pc, #200]	; (8003f4c <HAL_DMA_IRQHandler+0xcb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d036      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a31      	ldr	r2, [pc, #196]	; (8003f50 <HAL_DMA_IRQHandler+0xcbc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d031      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <HAL_DMA_IRQHandler+0xcc0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02c      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2e      	ldr	r2, [pc, #184]	; (8003f58 <HAL_DMA_IRQHandler+0xcc4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d027      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <HAL_DMA_IRQHandler+0xcc8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <HAL_DMA_IRQHandler+0xccc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <HAL_DMA_IRQHandler+0xcd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <HAL_DMA_IRQHandler+0xcd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_DMA_IRQHandler+0xcd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <HAL_DMA_IRQHandler+0xcdc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <HAL_DMA_IRQHandler+0xce0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xc60>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_DMA_IRQHandler+0xce4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <HAL_DMA_IRQHandler+0xc72>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0214 	bic.w	r2, r2, #20
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_DMA_IRQHandler+0xc82>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 020a 	bic.w	r2, r2, #10
 8003f14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80b8 	beq.w	80040a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f38:	e0b2      	b.n	80040a0 <HAL_DMA_IRQHandler+0xe0c>
 8003f3a:	bf00      	nop
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2208      	movs	r2, #8
 8003f86:	409a      	lsls	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8088 	beq.w	80040a2 <HAL_DMA_IRQHandler+0xe0e>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8082 	beq.w	80040a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <HAL_DMA_IRQHandler+0xe14>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d04a      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <HAL_DMA_IRQHandler+0xe18>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d045      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <HAL_DMA_IRQHandler+0xe1c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d040      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_DMA_IRQHandler+0xe20>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d03b      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_DMA_IRQHandler+0xe24>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d036      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_DMA_IRQHandler+0xe28>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <HAL_DMA_IRQHandler+0xe2c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d02c      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a36      	ldr	r2, [pc, #216]	; (80040c4 <HAL_DMA_IRQHandler+0xe30>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d027      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <HAL_DMA_IRQHandler+0xe34>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a33      	ldr	r2, [pc, #204]	; (80040cc <HAL_DMA_IRQHandler+0xe38>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_DMA_IRQHandler+0xe3c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <HAL_DMA_IRQHandler+0xe40>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_DMA_IRQHandler+0xe44>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2d      	ldr	r2, [pc, #180]	; (80040dc <HAL_DMA_IRQHandler+0xe48>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <HAL_DMA_IRQHandler+0xe4c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_DMA_IRQHandler+0xdaa>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <HAL_DMA_IRQHandler+0xe50>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <HAL_DMA_IRQHandler+0xdbc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 021c 	bic.w	r2, r2, #28
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e007      	b.n	8004060 <HAL_DMA_IRQHandler+0xdcc>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020e 	bic.w	r2, r2, #14
 800405e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e004      	b.n	80040a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40020010 	.word	0x40020010
 80040ac:	40020028 	.word	0x40020028
 80040b0:	40020040 	.word	0x40020040
 80040b4:	40020058 	.word	0x40020058
 80040b8:	40020070 	.word	0x40020070
 80040bc:	40020088 	.word	0x40020088
 80040c0:	400200a0 	.word	0x400200a0
 80040c4:	400200b8 	.word	0x400200b8
 80040c8:	40020410 	.word	0x40020410
 80040cc:	40020428 	.word	0x40020428
 80040d0:	40020440 	.word	0x40020440
 80040d4:	40020458 	.word	0x40020458
 80040d8:	40020470 	.word	0x40020470
 80040dc:	40020488 	.word	0x40020488
 80040e0:	400204a0 	.word	0x400204a0
 80040e4:	400204b8 	.word	0x400204b8

080040e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a84      	ldr	r2, [pc, #528]	; (8004318 <DMA_SetConfig+0x230>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d072      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a82      	ldr	r2, [pc, #520]	; (800431c <DMA_SetConfig+0x234>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d06d      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a81      	ldr	r2, [pc, #516]	; (8004320 <DMA_SetConfig+0x238>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d068      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7f      	ldr	r2, [pc, #508]	; (8004324 <DMA_SetConfig+0x23c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d063      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <DMA_SetConfig+0x240>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d05e      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a7c      	ldr	r2, [pc, #496]	; (800432c <DMA_SetConfig+0x244>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d059      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7b      	ldr	r2, [pc, #492]	; (8004330 <DMA_SetConfig+0x248>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d054      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a79      	ldr	r2, [pc, #484]	; (8004334 <DMA_SetConfig+0x24c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d04f      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a78      	ldr	r2, [pc, #480]	; (8004338 <DMA_SetConfig+0x250>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04a      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a76      	ldr	r2, [pc, #472]	; (800433c <DMA_SetConfig+0x254>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d045      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	; (8004340 <DMA_SetConfig+0x258>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d040      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a73      	ldr	r2, [pc, #460]	; (8004344 <DMA_SetConfig+0x25c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d03b      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a72      	ldr	r2, [pc, #456]	; (8004348 <DMA_SetConfig+0x260>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d036      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a70      	ldr	r2, [pc, #448]	; (800434c <DMA_SetConfig+0x264>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6f      	ldr	r2, [pc, #444]	; (8004350 <DMA_SetConfig+0x268>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d02c      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6d      	ldr	r2, [pc, #436]	; (8004354 <DMA_SetConfig+0x26c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	; (8004358 <DMA_SetConfig+0x270>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a6a      	ldr	r2, [pc, #424]	; (800435c <DMA_SetConfig+0x274>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a69      	ldr	r2, [pc, #420]	; (8004360 <DMA_SetConfig+0x278>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a67      	ldr	r2, [pc, #412]	; (8004364 <DMA_SetConfig+0x27c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a66      	ldr	r2, [pc, #408]	; (8004368 <DMA_SetConfig+0x280>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a64      	ldr	r2, [pc, #400]	; (800436c <DMA_SetConfig+0x284>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a63      	ldr	r2, [pc, #396]	; (8004370 <DMA_SetConfig+0x288>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <DMA_SetConfig+0x10a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a61      	ldr	r2, [pc, #388]	; (8004374 <DMA_SetConfig+0x28c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <DMA_SetConfig+0x10e>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <DMA_SetConfig+0x110>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004204:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004216:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3e      	ldr	r2, [pc, #248]	; (8004318 <DMA_SetConfig+0x230>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04a      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <DMA_SetConfig+0x234>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d045      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <DMA_SetConfig+0x238>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d040      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <DMA_SetConfig+0x23c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d03b      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <DMA_SetConfig+0x240>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d036      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a37      	ldr	r2, [pc, #220]	; (800432c <DMA_SetConfig+0x244>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d031      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a35      	ldr	r2, [pc, #212]	; (8004330 <DMA_SetConfig+0x248>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02c      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <DMA_SetConfig+0x24c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d027      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a32      	ldr	r2, [pc, #200]	; (8004338 <DMA_SetConfig+0x250>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a31      	ldr	r2, [pc, #196]	; (800433c <DMA_SetConfig+0x254>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d01d      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <DMA_SetConfig+0x258>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <DMA_SetConfig+0x25c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <DMA_SetConfig+0x260>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2b      	ldr	r2, [pc, #172]	; (800434c <DMA_SetConfig+0x264>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a29      	ldr	r2, [pc, #164]	; (8004350 <DMA_SetConfig+0x268>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <DMA_SetConfig+0x1d0>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a28      	ldr	r2, [pc, #160]	; (8004354 <DMA_SetConfig+0x26c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <DMA_SetConfig+0x1d4>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <DMA_SetConfig+0x1d6>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d05a      	beq.n	8004378 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	223f      	movs	r2, #63	; 0x3f
 80042cc:	409a      	lsls	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d108      	bne.n	8004304 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004302:	e087      	b.n	8004414 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	60da      	str	r2, [r3, #12]
}
 8004314:	e07e      	b.n	8004414 <DMA_SetConfig+0x32c>
 8004316:	bf00      	nop
 8004318:	40020010 	.word	0x40020010
 800431c:	40020028 	.word	0x40020028
 8004320:	40020040 	.word	0x40020040
 8004324:	40020058 	.word	0x40020058
 8004328:	40020070 	.word	0x40020070
 800432c:	40020088 	.word	0x40020088
 8004330:	400200a0 	.word	0x400200a0
 8004334:	400200b8 	.word	0x400200b8
 8004338:	40020410 	.word	0x40020410
 800433c:	40020428 	.word	0x40020428
 8004340:	40020440 	.word	0x40020440
 8004344:	40020458 	.word	0x40020458
 8004348:	40020470 	.word	0x40020470
 800434c:	40020488 	.word	0x40020488
 8004350:	400204a0 	.word	0x400204a0
 8004354:	400204b8 	.word	0x400204b8
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <DMA_SetConfig+0x338>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a27      	ldr	r2, [pc, #156]	; (8004424 <DMA_SetConfig+0x33c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <DMA_SetConfig+0x340>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <DMA_SetConfig+0x344>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <DMA_SetConfig+0x348>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <DMA_SetConfig+0x34c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <DMA_SetConfig+0x350>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <DMA_SetConfig+0x2e0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	; (800443c <DMA_SetConfig+0x354>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <DMA_SetConfig+0x2e4>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <DMA_SetConfig+0x2e6>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	409a      	lsls	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d108      	bne.n	8004404 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	60da      	str	r2, [r3, #12]
}
 8004402:	e007      	b.n	8004414 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	58025408 	.word	0x58025408
 8004424:	5802541c 	.word	0x5802541c
 8004428:	58025430 	.word	0x58025430
 800442c:	58025444 	.word	0x58025444
 8004430:	58025458 	.word	0x58025458
 8004434:	5802546c 	.word	0x5802546c
 8004438:	58025480 	.word	0x58025480
 800443c:	58025494 	.word	0x58025494

08004440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a42      	ldr	r2, [pc, #264]	; (8004558 <DMA_CalcBaseAndBitshift+0x118>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d04a      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a41      	ldr	r2, [pc, #260]	; (800455c <DMA_CalcBaseAndBitshift+0x11c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d045      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3f      	ldr	r2, [pc, #252]	; (8004560 <DMA_CalcBaseAndBitshift+0x120>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d040      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <DMA_CalcBaseAndBitshift+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d03b      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <DMA_CalcBaseAndBitshift+0x128>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d036      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3b      	ldr	r2, [pc, #236]	; (800456c <DMA_CalcBaseAndBitshift+0x12c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d031      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a39      	ldr	r2, [pc, #228]	; (8004570 <DMA_CalcBaseAndBitshift+0x130>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02c      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <DMA_CalcBaseAndBitshift+0x134>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d027      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a36      	ldr	r2, [pc, #216]	; (8004578 <DMA_CalcBaseAndBitshift+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a35      	ldr	r2, [pc, #212]	; (800457c <DMA_CalcBaseAndBitshift+0x13c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d01d      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a33      	ldr	r2, [pc, #204]	; (8004580 <DMA_CalcBaseAndBitshift+0x140>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a32      	ldr	r2, [pc, #200]	; (8004584 <DMA_CalcBaseAndBitshift+0x144>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a30      	ldr	r2, [pc, #192]	; (8004588 <DMA_CalcBaseAndBitshift+0x148>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2f      	ldr	r2, [pc, #188]	; (800458c <DMA_CalcBaseAndBitshift+0x14c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <DMA_CalcBaseAndBitshift+0x150>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <DMA_CalcBaseAndBitshift+0xa8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <DMA_CalcBaseAndBitshift+0x154>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <DMA_CalcBaseAndBitshift+0xac>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <DMA_CalcBaseAndBitshift+0xae>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d024      	beq.n	800453c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3b10      	subs	r3, #16
 80044fa:	4a27      	ldr	r2, [pc, #156]	; (8004598 <DMA_CalcBaseAndBitshift+0x158>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	4a24      	ldr	r2, [pc, #144]	; (800459c <DMA_CalcBaseAndBitshift+0x15c>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d908      	bls.n	800452c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004522:	4013      	ands	r3, r2
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	; 0x58
 800452a:	e00d      	b.n	8004548 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6593      	str	r3, [r2, #88]	; 0x58
 800453a:	e005      	b.n	8004548 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
 8004598:	aaaaaaab 	.word	0xaaaaaaab
 800459c:	08009154 	.word	0x08009154
 80045a0:	fffffc00 	.word	0xfffffc00

080045a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d120      	bne.n	80045fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d858      	bhi.n	8004672 <DMA_CheckFifoParam+0xce>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <DMA_CheckFifoParam+0x24>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045eb 	.word	0x080045eb
 80045d0:	080045d9 	.word	0x080045d9
 80045d4:	08004673 	.word	0x08004673
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d048      	beq.n	8004676 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e8:	e045      	b.n	8004676 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045f2:	d142      	bne.n	800467a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045f8:	e03f      	b.n	800467a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004602:	d123      	bne.n	800464c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b03      	cmp	r3, #3
 800460a:	d838      	bhi.n	800467e <DMA_CheckFifoParam+0xda>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <DMA_CheckFifoParam+0x70>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	0800462b 	.word	0x0800462b
 800461c:	08004625 	.word	0x08004625
 8004620:	0800463d 	.word	0x0800463d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
        break;
 8004628:	e030      	b.n	800468c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d025      	beq.n	8004682 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463a:	e022      	b.n	8004682 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004644:	d11f      	bne.n	8004686 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800464a:	e01c      	b.n	8004686 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b02      	cmp	r3, #2
 8004652:	d902      	bls.n	800465a <DMA_CheckFifoParam+0xb6>
 8004654:	2b03      	cmp	r3, #3
 8004656:	d003      	beq.n	8004660 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004658:	e018      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
        break;
 800465e:	e015      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
    break;
 8004670:	e00b      	b.n	800468a <DMA_CheckFifoParam+0xe6>
        break;
 8004672:	bf00      	nop
 8004674:	e00a      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        break;
 8004676:	bf00      	nop
 8004678:	e008      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        break;
 800467a:	bf00      	nop
 800467c:	e006      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        break;
 800467e:	bf00      	nop
 8004680:	e004      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        break;
 8004682:	bf00      	nop
 8004684:	e002      	b.n	800468c <DMA_CheckFifoParam+0xe8>
        break;
 8004686:	bf00      	nop
 8004688:	e000      	b.n	800468c <DMA_CheckFifoParam+0xe8>
    break;
 800468a:	bf00      	nop
    }
  }

  return status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop

0800469c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a36      	ldr	r2, [pc, #216]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a35      	ldr	r2, [pc, #212]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2f      	ldr	r2, [pc, #188]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3b08      	subs	r3, #8
 800470c:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004728:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004738:	e024      	b.n	8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3b10      	subs	r3, #16
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d806      	bhi.n	8004762 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d902      	bls.n	8004762 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3308      	adds	r3, #8
 8004760:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a16      	ldr	r2, [pc, #88]	; (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004774:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	58025408 	.word	0x58025408
 8004794:	5802541c 	.word	0x5802541c
 8004798:	58025430 	.word	0x58025430
 800479c:	58025444 	.word	0x58025444
 80047a0:	58025458 	.word	0x58025458
 80047a4:	5802546c 	.word	0x5802546c
 80047a8:	58025480 	.word	0x58025480
 80047ac:	58025494 	.word	0x58025494
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	16009600 	.word	0x16009600
 80047b8:	58025880 	.word	0x58025880
 80047bc:	aaaaaaab 	.word	0xaaaaaaab
 80047c0:	400204b8 	.word	0x400204b8
 80047c4:	4002040f 	.word	0x4002040f
 80047c8:	10008200 	.word	0x10008200
 80047cc:	40020880 	.word	0x40020880

080047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d04a      	beq.n	800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d847      	bhi.n	800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a25      	ldr	r2, [pc, #148]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a24      	ldr	r2, [pc, #144]	; (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a21      	ldr	r2, [pc, #132]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004858:	671a      	str	r2, [r3, #112]	; 0x70
 800485a:	e009      	b.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800486e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b01      	subs	r3, #1
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	58025408 	.word	0x58025408
 800488c:	5802541c 	.word	0x5802541c
 8004890:	58025430 	.word	0x58025430
 8004894:	58025444 	.word	0x58025444
 8004898:	58025458 	.word	0x58025458
 800489c:	5802546c 	.word	0x5802546c
 80048a0:	58025480 	.word	0x58025480
 80048a4:	58025494 	.word	0x58025494
 80048a8:	1600963f 	.word	0x1600963f
 80048ac:	58025940 	.word	0x58025940
 80048b0:	1000823f 	.word	0x1000823f
 80048b4:	40020940 	.word	0x40020940

080048b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048c6:	4b89      	ldr	r3, [pc, #548]	; (8004aec <HAL_GPIO_Init+0x234>)
 80048c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ca:	e194      	b.n	8004bf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8186 	beq.w	8004bf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d005      	beq.n	80048fc <HAL_GPIO_Init+0x44>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d130      	bne.n	800495e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004932:	2201      	movs	r2, #1
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0201 	and.w	r2, r3, #1
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b03      	cmp	r3, #3
 8004968:	d017      	beq.n	800499a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2203      	movs	r2, #3
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d123      	bne.n	80049ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3208      	adds	r2, #8
 80049ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	08da      	lsrs	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3208      	adds	r2, #8
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2203      	movs	r2, #3
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0203 	and.w	r2, r3, #3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80e0 	beq.w	8004bf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a30:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <HAL_GPIO_Init+0x238>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a36:	4a2e      	ldr	r2, [pc, #184]	; (8004af0 <HAL_GPIO_Init+0x238>)
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a40:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_GPIO_Init+0x238>)
 8004a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4e:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <HAL_GPIO_Init+0x23c>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_GPIO_Init+0x240>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d052      	beq.n	8004b20 <HAL_GPIO_Init+0x268>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <HAL_GPIO_Init+0x244>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d031      	beq.n	8004ae6 <HAL_GPIO_Init+0x22e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_GPIO_Init+0x248>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02b      	beq.n	8004ae2 <HAL_GPIO_Init+0x22a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_GPIO_Init+0x24c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d025      	beq.n	8004ade <HAL_GPIO_Init+0x226>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_GPIO_Init+0x250>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <HAL_GPIO_Init+0x222>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_GPIO_Init+0x254>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x21e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a1a      	ldr	r2, [pc, #104]	; (8004b10 <HAL_GPIO_Init+0x258>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x21a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <HAL_GPIO_Init+0x25c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x216>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a18      	ldr	r2, [pc, #96]	; (8004b18 <HAL_GPIO_Init+0x260>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x212>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_GPIO_Init+0x264>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x20e>
 8004ac2:	2309      	movs	r3, #9
 8004ac4:	e02d      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	e02b      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004aca:	2308      	movs	r3, #8
 8004acc:	e029      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ace:	2307      	movs	r3, #7
 8004ad0:	e027      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	e025      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ad6:	2305      	movs	r3, #5
 8004ad8:	e023      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ada:	2304      	movs	r3, #4
 8004adc:	e021      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e01f      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e01d      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e01b      	b.n	8004b22 <HAL_GPIO_Init+0x26a>
 8004aea:	bf00      	nop
 8004aec:	58000080 	.word	0x58000080
 8004af0:	58024400 	.word	0x58024400
 8004af4:	58000400 	.word	0x58000400
 8004af8:	58020000 	.word	0x58020000
 8004afc:	58020400 	.word	0x58020400
 8004b00:	58020800 	.word	0x58020800
 8004b04:	58020c00 	.word	0x58020c00
 8004b08:	58021000 	.word	0x58021000
 8004b0c:	58021400 	.word	0x58021400
 8004b10:	58021800 	.word	0x58021800
 8004b14:	58021c00 	.word	0x58021c00
 8004b18:	58022000 	.word	0x58022000
 8004b1c:	58022400 	.word	0x58022400
 8004b20:	2300      	movs	r3, #0
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	f002 0203 	and.w	r2, r2, #3
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4093      	lsls	r3, r2
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b32:	4938      	ldr	r1, [pc, #224]	; (8004c14 <HAL_GPIO_Init+0x35c>)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f47f ae63 	bne.w	80048cc <HAL_GPIO_Init+0x14>
  }
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	3724      	adds	r7, #36	; 0x24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	58000400 	.word	0x58000400

08004c18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d00a      	beq.n	8004c42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d001      	beq.n	8004c3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01f      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e01d      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	490f      	ldr	r1, [pc, #60]	; (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c52:	f7fc f82d 	bl	8000cb0 <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c58:	e009      	b.n	8004c6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c5a:	f7fc f829 	bl	8000cb0 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c68:	d901      	bls.n	8004c6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e007      	b.n	8004c7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_PWREx_ConfigSupply+0x70>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d1ee      	bne.n	8004c5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024800 	.word	0x58024800

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f000 bc1c 	b.w	80054d8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8087 	beq.w	8004dbc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cae:	4b9e      	ldr	r3, [pc, #632]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cb8:	4b9b      	ldr	r3, [pc, #620]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x48>
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b18      	cmp	r3, #24
 8004cc8:	d110      	bne.n	8004cec <HAL_RCC_OscConfig+0x60>
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	4b94      	ldr	r3, [pc, #592]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d06c      	beq.n	8004dba <HAL_RCC_OscConfig+0x12e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d168      	bne.n	8004dba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e3f5      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCC_OscConfig+0x78>
 8004cf6:	4b8c      	ldr	r3, [pc, #560]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a8b      	ldr	r2, [pc, #556]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e02e      	b.n	8004d62 <HAL_RCC_OscConfig+0xd6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10c      	bne.n	8004d26 <HAL_RCC_OscConfig+0x9a>
 8004d0c:	4b86      	ldr	r3, [pc, #536]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a85      	ldr	r2, [pc, #532]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	4b83      	ldr	r3, [pc, #524]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a82      	ldr	r2, [pc, #520]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e01d      	b.n	8004d62 <HAL_RCC_OscConfig+0xd6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d2e:	d10c      	bne.n	8004d4a <HAL_RCC_OscConfig+0xbe>
 8004d30:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b7a      	ldr	r3, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a79      	ldr	r2, [pc, #484]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e00b      	b.n	8004d62 <HAL_RCC_OscConfig+0xd6>
 8004d4a:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fb ffa1 	bl	8000cb0 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d72:	f7fb ff9d 	bl	8000cb0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b64      	cmp	r3, #100	; 0x64
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e3a9      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0xe6>
 8004d90:	e014      	b.n	8004dbc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fb ff8d 	bl	8000cb0 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9a:	f7fb ff89 	bl	8000cb0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b64      	cmp	r3, #100	; 0x64
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e395      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dac:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x10e>
 8004db8:	e000      	b.n	8004dbc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80ca 	beq.w	8004f5e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dca:	4b57      	ldr	r3, [pc, #348]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dd4:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_RCC_OscConfig+0x164>
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b18      	cmp	r3, #24
 8004de4:	d156      	bne.n	8004e94 <HAL_RCC_OscConfig+0x208>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d151      	bne.n	8004e94 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df0:	4b4d      	ldr	r3, [pc, #308]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x17c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e367      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e08:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0219 	bic.w	r2, r3, #25
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4944      	ldr	r1, [pc, #272]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e1a:	f7fb ff49 	bl	8000cb0 <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fb ff45 	bl	8000cb0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e351      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e34:	4b3c      	ldr	r3, [pc, #240]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	f7fb ff42 	bl	8000cc8 <HAL_GetREVID>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d817      	bhi.n	8004e7e <HAL_RCC_OscConfig+0x1f2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d108      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1dc>
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e5e:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e66:	e07a      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	492c      	ldr	r1, [pc, #176]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e7c:	e06f      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	4926      	ldr	r1, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e92:	e064      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d047      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0219 	bic.w	r2, r3, #25
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fb feff 	bl	8000cb0 <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb6:	f7fb fefb 	bl	8000cb0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e307      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	f7fb fef8 	bl	8000cc8 <HAL_GetREVID>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d817      	bhi.n	8004f12 <HAL_RCC_OscConfig+0x286>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d108      	bne.n	8004efc <HAL_RCC_OscConfig+0x270>
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ef2:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	6053      	str	r3, [r2, #4]
 8004efa:	e030      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	4907      	ldr	r1, [pc, #28]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
 8004f10:	e025      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	4901      	ldr	r1, [pc, #4]	; (8004f28 <HAL_RCC_OscConfig+0x29c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	604b      	str	r3, [r1, #4]
 8004f26:	e01a      	b.n	8004f5e <HAL_RCC_OscConfig+0x2d2>
 8004f28:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f2c:	4b9e      	ldr	r3, [pc, #632]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a9d      	ldr	r2, [pc, #628]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fb feba 	bl	8000cb0 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f40:	f7fb feb6 	bl	8000cb0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e2c2      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f52:	4b95      	ldr	r3, [pc, #596]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80a9 	beq.w	80050be <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f6c:	4b8e      	ldr	r3, [pc, #568]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f76:	4b8c      	ldr	r3, [pc, #560]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d007      	beq.n	8004f92 <HAL_RCC_OscConfig+0x306>
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b18      	cmp	r3, #24
 8004f86:	d13a      	bne.n	8004ffe <HAL_RCC_OscConfig+0x372>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d135      	bne.n	8004ffe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f92:	4b85      	ldr	r3, [pc, #532]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x31e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e296      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004faa:	f7fb fe8d 	bl	8000cc8 <HAL_GetREVID>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d817      	bhi.n	8004fe8 <HAL_RCC_OscConfig+0x35c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d108      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x346>
 8004fc0:	4b79      	ldr	r3, [pc, #484]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fc8:	4a77      	ldr	r2, [pc, #476]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fd0:	e075      	b.n	80050be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fd2:	4b75      	ldr	r3, [pc, #468]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	069b      	lsls	r3, r3, #26
 8004fe0:	4971      	ldr	r1, [pc, #452]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fe6:	e06a      	b.n	80050be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fe8:	4b6f      	ldr	r3, [pc, #444]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	496c      	ldr	r1, [pc, #432]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ffc:	e05f      	b.n	80050be <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d042      	beq.n	800508c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005006:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a67      	ldr	r2, [pc, #412]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fb fe4d 	bl	8000cb0 <HAL_GetTick>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800501a:	f7fb fe49 	bl	8000cb0 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e255      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800502c:	4b5e      	ldr	r3, [pc, #376]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005038:	f7fb fe46 	bl	8000cc8 <HAL_GetREVID>
 800503c:	4603      	mov	r3, r0
 800503e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005042:	4293      	cmp	r3, r2
 8005044:	d817      	bhi.n	8005076 <HAL_RCC_OscConfig+0x3ea>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	2b20      	cmp	r3, #32
 800504c:	d108      	bne.n	8005060 <HAL_RCC_OscConfig+0x3d4>
 800504e:	4b56      	ldr	r3, [pc, #344]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005056:	4a54      	ldr	r2, [pc, #336]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800505c:	6053      	str	r3, [r2, #4]
 800505e:	e02e      	b.n	80050be <HAL_RCC_OscConfig+0x432>
 8005060:	4b51      	ldr	r3, [pc, #324]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	069b      	lsls	r3, r3, #26
 800506e:	494e      	ldr	r1, [pc, #312]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
 8005074:	e023      	b.n	80050be <HAL_RCC_OscConfig+0x432>
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	4948      	ldr	r1, [pc, #288]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	60cb      	str	r3, [r1, #12]
 800508a:	e018      	b.n	80050be <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800508c:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a45      	ldr	r2, [pc, #276]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fb fe0a 	bl	8000cb0 <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80050a0:	f7fb fe06 	bl	8000cb0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e212      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d019      	beq.n	8005106 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 80050d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d6:	4a34      	ldr	r2, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050de:	f7fb fde7 	bl	8000cb0 <HAL_GetTick>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e6:	f7fb fde3 	bl	8000cb0 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e1ef      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 80050fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x45a>
 8005104:	e018      	b.n	8005138 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510a:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fb fdcd 	bl	8000cb0 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511a:	f7fb fdc9 	bl	8000cb0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1d5      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d039      	beq.n	80051b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d019      	beq.n	8005180 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800514c:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005156:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005158:	f7fb fdaa 	bl	8000cb0 <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005160:	f7fb fda6 	bl	8000cb0 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1b2      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x4d4>
 800517e:	e01b      	b.n	80051b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_RCC_OscConfig+0x51c>)
 8005186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800518c:	f7fb fd90 	bl	8000cb0 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005194:	f7fb fd8c 	bl	8000cb0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d904      	bls.n	80051ac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e198      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ac:	4ba3      	ldr	r3, [pc, #652]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ed      	bne.n	8005194 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8081 	beq.w	80052c8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051c6:	4b9e      	ldr	r3, [pc, #632]	; (8005440 <HAL_RCC_OscConfig+0x7b4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a9d      	ldr	r2, [pc, #628]	; (8005440 <HAL_RCC_OscConfig+0x7b4>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051d2:	f7fb fd6d 	bl	8000cb0 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fb fd69 	bl	8000cb0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e175      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ec:	4b94      	ldr	r3, [pc, #592]	; (8005440 <HAL_RCC_OscConfig+0x7b4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x582>
 8005200:	4b8e      	ldr	r3, [pc, #568]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	4a8d      	ldr	r2, [pc, #564]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6713      	str	r3, [r2, #112]	; 0x70
 800520c:	e02d      	b.n	800526a <HAL_RCC_OscConfig+0x5de>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x5a4>
 8005216:	4b89      	ldr	r3, [pc, #548]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a88      	ldr	r2, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
 8005222:	4b86      	ldr	r3, [pc, #536]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	4a85      	ldr	r2, [pc, #532]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005228:	f023 0304 	bic.w	r3, r3, #4
 800522c:	6713      	str	r3, [r2, #112]	; 0x70
 800522e:	e01c      	b.n	800526a <HAL_RCC_OscConfig+0x5de>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b05      	cmp	r3, #5
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x5c6>
 8005238:	4b80      	ldr	r3, [pc, #512]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a7f      	ldr	r2, [pc, #508]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800523e:	f043 0304 	orr.w	r3, r3, #4
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	4b7d      	ldr	r3, [pc, #500]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a7c      	ldr	r2, [pc, #496]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
 8005250:	e00b      	b.n	800526a <HAL_RCC_OscConfig+0x5de>
 8005252:	4b7a      	ldr	r3, [pc, #488]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a79      	ldr	r2, [pc, #484]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	4b77      	ldr	r3, [pc, #476]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a76      	ldr	r2, [pc, #472]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d015      	beq.n	800529e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005272:	f7fb fd1d 	bl	8000cb0 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005278:	e00a      	b.n	8005290 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527a:	f7fb fd19 	bl	8000cb0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f241 3288 	movw	r2, #5000	; 0x1388
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e123      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005290:	4b6a      	ldr	r3, [pc, #424]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ee      	beq.n	800527a <HAL_RCC_OscConfig+0x5ee>
 800529c:	e014      	b.n	80052c8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fb fd07 	bl	8000cb0 <HAL_GetTick>
 80052a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052a4:	e00a      	b.n	80052bc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fb fd03 	bl	8000cb0 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e10d      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052bc:	4b5f      	ldr	r3, [pc, #380]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1ee      	bne.n	80052a6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8102 	beq.w	80054d6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052d2:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052da:	2b18      	cmp	r3, #24
 80052dc:	f000 80bd 	beq.w	800545a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	f040 8095 	bne.w	8005414 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b54      	ldr	r3, [pc, #336]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a53      	ldr	r2, [pc, #332]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80052f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fb fcdb 	bl	8000cb0 <HAL_GetTick>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fb fcd7 	bl	8000cb0 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0e3      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005310:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f0      	bne.n	80052fe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531c:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800531e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005320:	4b48      	ldr	r3, [pc, #288]	; (8005444 <HAL_RCC_OscConfig+0x7b8>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800532c:	0112      	lsls	r2, r2, #4
 800532e:	430a      	orrs	r2, r1
 8005330:	4942      	ldr	r1, [pc, #264]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	628b      	str	r3, [r1, #40]	; 0x28
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	3b01      	subs	r3, #1
 800533c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	3b01      	subs	r3, #1
 8005346:	025b      	lsls	r3, r3, #9
 8005348:	b29b      	uxth	r3, r3
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	3b01      	subs	r3, #1
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005366:	4935      	ldr	r1, [pc, #212]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005368:	4313      	orrs	r3, r2
 800536a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800536c:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	4a32      	ldr	r2, [pc, #200]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800537a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537c:	4b32      	ldr	r3, [pc, #200]	; (8005448 <HAL_RCC_OscConfig+0x7bc>)
 800537e:	4013      	ands	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005384:	00d2      	lsls	r2, r2, #3
 8005386:	492d      	ldr	r1, [pc, #180]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005388:	4313      	orrs	r3, r2
 800538a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f023 020c 	bic.w	r2, r3, #12
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	4928      	ldr	r1, [pc, #160]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800539a:	4313      	orrs	r3, r2
 800539c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f023 0202 	bic.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	4924      	ldr	r1, [pc, #144]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053b0:	4b22      	ldr	r3, [pc, #136]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b1f      	ldr	r3, [pc, #124]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80053d4:	4b19      	ldr	r3, [pc, #100]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e0:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 80053e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fb fc60 	bl	8000cb0 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f4:	f7fb fc5c 	bl	8000cb0 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e068      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x768>
 8005412:	e060      	b.n	80054d6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <HAL_RCC_OscConfig+0x7b0>)
 800541a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fb fc46 	bl	8000cb0 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005426:	e011      	b.n	800544c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005428:	f7fb fc42 	bl	8000cb0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d90a      	bls.n	800544c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e04e      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
 8005440:	58024800 	.word	0x58024800
 8005444:	fffffc0c 	.word	0xfffffc0c
 8005448:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCC_OscConfig+0x854>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e7      	bne.n	8005428 <HAL_RCC_OscConfig+0x79c>
 8005458:	e03d      	b.n	80054d6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800545a:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCC_OscConfig+0x854>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005460:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <HAL_RCC_OscConfig+0x854>)
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b01      	cmp	r3, #1
 800546c:	d031      	beq.n	80054d2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f003 0203 	and.w	r2, r3, #3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005478:	429a      	cmp	r2, r3
 800547a:	d12a      	bne.n	80054d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	091b      	lsrs	r3, r3, #4
 8005480:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d122      	bne.n	80054d2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d11a      	bne.n	80054d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	0a5b      	lsrs	r3, r3, #9
 80054a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d111      	bne.n	80054d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d108      	bne.n	80054d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	0e1b      	lsrs	r3, r3, #24
 80054c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3730      	adds	r7, #48	; 0x30
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	58024400 	.word	0x58024400

080054e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e19c      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054f8:	4b8a      	ldr	r3, [pc, #552]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d910      	bls.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b87      	ldr	r3, [pc, #540]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 020f 	bic.w	r2, r3, #15
 800550e:	4985      	ldr	r1, [pc, #532]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b83      	ldr	r3, [pc, #524]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e184      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	4b7b      	ldr	r3, [pc, #492]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005540:	429a      	cmp	r2, r3
 8005542:	d908      	bls.n	8005556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005544:	4b78      	ldr	r3, [pc, #480]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	4975      	ldr	r1, [pc, #468]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800556e:	429a      	cmp	r2, r3
 8005570:	d908      	bls.n	8005584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	496a      	ldr	r1, [pc, #424]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005580:	4313      	orrs	r3, r2
 8005582:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	4b64      	ldr	r3, [pc, #400]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800559c:	429a      	cmp	r2, r3
 800559e:	d908      	bls.n	80055b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055a0:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	495e      	ldr	r1, [pc, #376]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d010      	beq.n	80055e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d908      	bls.n	80055e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055ce:	4b56      	ldr	r3, [pc, #344]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4953      	ldr	r1, [pc, #332]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d908      	bls.n	800560e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f023 020f 	bic.w	r2, r3, #15
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4947      	ldr	r1, [pc, #284]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800560a:	4313      	orrs	r3, r2
 800560c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d055      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4940      	ldr	r1, [pc, #256]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d107      	bne.n	8005644 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005634:	4b3c      	ldr	r3, [pc, #240]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d121      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0f6      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d107      	bne.n	800565c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d115      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0ea      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d107      	bne.n	8005674 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005664:	4b30      	ldr	r3, [pc, #192]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0de      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005674:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0d6      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f023 0207 	bic.w	r2, r3, #7
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005696:	f7fb fb0b 	bl	8000cb0 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569e:	f7fb fb07 	bl	8000cb0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0be      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d1eb      	bne.n	800569e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d010      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	429a      	cmp	r2, r3
 80056e0:	d208      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f023 020f 	bic.w	r2, r3, #15
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	490e      	ldr	r1, [pc, #56]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d214      	bcs.n	800572c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 020f 	bic.w	r2, r3, #15
 800570a:	4906      	ldr	r1, [pc, #24]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d005      	beq.n	800572c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e086      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
 8005724:	52002000 	.word	0x52002000
 8005728:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	4b3f      	ldr	r3, [pc, #252]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005744:	429a      	cmp	r2, r3
 8005746:	d208      	bcs.n	800575a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005748:	4b3c      	ldr	r3, [pc, #240]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4939      	ldr	r1, [pc, #228]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005756:	4313      	orrs	r3, r2
 8005758:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005772:	429a      	cmp	r2, r3
 8005774:	d208      	bcs.n	8005788 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005776:	4b31      	ldr	r3, [pc, #196]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	492e      	ldr	r1, [pc, #184]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005784:	4313      	orrs	r3, r2
 8005786:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	4b28      	ldr	r3, [pc, #160]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d208      	bcs.n	80057b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057a4:	4b25      	ldr	r3, [pc, #148]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	4922      	ldr	r1, [pc, #136]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d208      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4917      	ldr	r1, [pc, #92]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057e4:	f000 f834 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	4912      	ldr	r1, [pc, #72]	; (8005840 <HAL_RCC_ClockConfig+0x35c>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005802:	4b0e      	ldr	r3, [pc, #56]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <HAL_RCC_ClockConfig+0x35c>)
 800580c:	5cd3      	ldrb	r3, [r2, r3]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_RCC_ClockConfig+0x360>)
 800581a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581c:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <HAL_RCC_ClockConfig+0x364>)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x368>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fb f9f8 	bl	8000c1c <HAL_InitTick>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
 8005840:	08009144 	.word	0x08009144
 8005844:	24000004 	.word	0x24000004
 8005848:	24000000 	.word	0x24000000
 800584c:	24000008 	.word	0x24000008

08005850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005856:	4bb3      	ldr	r3, [pc, #716]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585e:	2b18      	cmp	r3, #24
 8005860:	f200 8155 	bhi.w	8005b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058d1 	.word	0x080058d1
 8005870:	08005b0f 	.word	0x08005b0f
 8005874:	08005b0f 	.word	0x08005b0f
 8005878:	08005b0f 	.word	0x08005b0f
 800587c:	08005b0f 	.word	0x08005b0f
 8005880:	08005b0f 	.word	0x08005b0f
 8005884:	08005b0f 	.word	0x08005b0f
 8005888:	08005b0f 	.word	0x08005b0f
 800588c:	080058f7 	.word	0x080058f7
 8005890:	08005b0f 	.word	0x08005b0f
 8005894:	08005b0f 	.word	0x08005b0f
 8005898:	08005b0f 	.word	0x08005b0f
 800589c:	08005b0f 	.word	0x08005b0f
 80058a0:	08005b0f 	.word	0x08005b0f
 80058a4:	08005b0f 	.word	0x08005b0f
 80058a8:	08005b0f 	.word	0x08005b0f
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	08005b0f 	.word	0x08005b0f
 80058b4:	08005b0f 	.word	0x08005b0f
 80058b8:	08005b0f 	.word	0x08005b0f
 80058bc:	08005b0f 	.word	0x08005b0f
 80058c0:	08005b0f 	.word	0x08005b0f
 80058c4:	08005b0f 	.word	0x08005b0f
 80058c8:	08005b0f 	.word	0x08005b0f
 80058cc:	08005903 	.word	0x08005903
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d0:	4b94      	ldr	r3, [pc, #592]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058dc:	4b91      	ldr	r3, [pc, #580]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	4a90      	ldr	r2, [pc, #576]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80058ee:	e111      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058f0:	4b8d      	ldr	r3, [pc, #564]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f2:	61bb      	str	r3, [r7, #24]
    break;
 80058f4:	e10e      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80058f6:	4b8d      	ldr	r3, [pc, #564]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058f8:	61bb      	str	r3, [r7, #24]
    break;
 80058fa:	e10b      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80058fc:	4b8c      	ldr	r3, [pc, #560]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058fe:	61bb      	str	r3, [r7, #24]
    break;
 8005900:	e108      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005902:	4b88      	ldr	r3, [pc, #544]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800590c:	4b85      	ldr	r3, [pc, #532]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005916:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005918:	4b82      	ldr	r3, [pc, #520]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005922:	4b80      	ldr	r3, [pc, #512]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80e1 	beq.w	8005b08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b02      	cmp	r3, #2
 800594a:	f000 8083 	beq.w	8005a54 <HAL_RCC_GetSysClockFreq+0x204>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f200 80a1 	bhi.w	8005a98 <HAL_RCC_GetSysClockFreq+0x248>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x114>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d056      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005962:	e099      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005964:	4b6f      	ldr	r3, [pc, #444]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02d      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	08db      	lsrs	r3, r3, #3
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	4a6b      	ldr	r2, [pc, #428]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b62      	ldr	r3, [pc, #392]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80059ca:	e087      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b51      	ldr	r3, [pc, #324]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0e:	e065      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a52:	e043      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a96:	e021      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aaa:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005abe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ada:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	0a5b      	lsrs	r3, r3, #9
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b00:	ee17 3a90 	vmov	r3, s15
 8005b04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b06:	e005      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    break;
 8005b0c:	e002      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b10:	61bb      	str	r3, [r7, #24]
    break;
 8005b12:	bf00      	nop
  }

  return sysclockfreq;
 8005b14:	69bb      	ldr	r3, [r7, #24]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	017d7840 	.word	0x017d7840
 8005b34:	46000000 	.word	0x46000000
 8005b38:	4c742400 	.word	0x4c742400
 8005b3c:	4a742400 	.word	0x4a742400
 8005b40:	4bbebc20 	.word	0x4bbebc20

08005b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b4a:	f7ff fe81 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	490f      	ldr	r1, [pc, #60]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b5c:	5ccb      	ldrb	r3, [r1, r3]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	58024400 	.word	0x58024400
 8005b98:	08009144 	.word	0x08009144
 8005b9c:	24000004 	.word	0x24000004
 8005ba0:	24000000 	.word	0x24000000

08005ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d03f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bc8:	d02a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005bca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bce:	d824      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd4:	d018      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bda:	d81e      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be4:	d007      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005be6:	e018      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4bab      	ldr	r3, [pc, #684]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4aaa      	ldr	r2, [pc, #680]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bf4:	e015      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fff3 	bl	8007be8 <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c06:	e00c      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3324      	adds	r3, #36	; 0x24
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f002 f89c 	bl	8007d4c <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c18:	e003      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c28:	4b9b      	ldr	r3, [pc, #620]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c34:	4998      	ldr	r1, [pc, #608]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	650b      	str	r3, [r1, #80]	; 0x50
 8005c3a:	e001      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03d      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d826      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c71 	.word	0x08005c71
 8005c60:	08005c7f 	.word	0x08005c7f
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005ca9 	.word	0x08005ca9
 8005c6c:	08005ca9 	.word	0x08005ca9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c70:	4b89      	ldr	r3, [pc, #548]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4a88      	ldr	r2, [pc, #544]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c7c:	e015      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 ffaf 	bl	8007be8 <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c8e:	e00c      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3324      	adds	r3, #36	; 0x24
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f002 f858 	bl	8007d4c <RCCEx_PLL3_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e003      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca6:	e000      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cb0:	4b79      	ldr	r3, [pc, #484]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	f023 0207 	bic.w	r2, r3, #7
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	4976      	ldr	r1, [pc, #472]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	650b      	str	r3, [r1, #80]	; 0x50
 8005cc2:	e001      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d042      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cdc:	d02b      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce2:	d825      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ce4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce6:	d028      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ce8:	2bc0      	cmp	r3, #192	; 0xc0
 8005cea:	d821      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cec:	2b80      	cmp	r3, #128	; 0x80
 8005cee:	d016      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d81d      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005cfc:	e018      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfe:	4b66      	ldr	r3, [pc, #408]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a65      	ldr	r2, [pc, #404]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d0a:	e017      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 ff68 	bl	8007be8 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d1c:	e00e      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3324      	adds	r3, #36	; 0x24
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f002 f811 	bl	8007d4c <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d2e:	e005      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
      break;
 8005d34:	e002      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d42:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	4952      	ldr	r1, [pc, #328]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	650b      	str	r3, [r1, #80]	; 0x50
 8005d54:	e001      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d049      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d70:	d030      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d76:	d82a      	bhi.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d7c:	d02c      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d82:	d824      	bhi.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d88:	d018      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8e:	d81e      	bhi.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d98:	d007      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d9a:	e018      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4a3d      	ldr	r2, [pc, #244]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005da8:	e017      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 ff19 	bl	8007be8 <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005dba:	e00e      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3324      	adds	r3, #36	; 0x24
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 ffc2 	bl	8007d4c <RCCEx_PLL3_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dcc:	e005      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005dd4:	bf00      	nop
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dee:	492a      	ldr	r1, [pc, #168]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	658b      	str	r3, [r1, #88]	; 0x58
 8005df4:	e001      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d04c      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e10:	d030      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e16:	d82a      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e1c:	d02c      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e22:	d824      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e28:	d018      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2e:	d81e      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e38:	d007      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e3a:	e018      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e48:	e017      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fec9 	bl	8007be8 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e5a:	e00e      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 ff72 	bl	8007d4c <RCCEx_PLL3_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e6c:	e005      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
      break;
 8005e72:	e002      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e74:	bf00      	nop
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e8e:	4902      	ldr	r1, [pc, #8]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	658b      	str	r3, [r1, #88]	; 0x58
 8005e94:	e004      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d032      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d01c      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d817      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d00c      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d813      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec8:	4baf      	ldr	r3, [pc, #700]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	4aae      	ldr	r2, [pc, #696]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ed4:	e00e      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	2102      	movs	r1, #2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fe83 	bl	8007be8 <RCCEx_PLL2_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005efa:	4ba3      	ldr	r3, [pc, #652]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f06:	49a0      	ldr	r1, [pc, #640]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f0c:	e001      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d047      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f26:	d030      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f2c:	d82a      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f32:	d02c      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f38:	d824      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3e:	d018      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f44:	d81e      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	d007      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f50:	e018      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f52:	4b8d      	ldr	r3, [pc, #564]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	4a8c      	ldr	r2, [pc, #560]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f5e:	e017      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fe3e 	bl	8007be8 <RCCEx_PLL2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f70:	e00e      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3324      	adds	r3, #36	; 0x24
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fee7 	bl	8007d4c <RCCEx_PLL3_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	75fb      	strb	r3, [r7, #23]
      break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f96:	4b7c      	ldr	r3, [pc, #496]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	4979      	ldr	r1, [pc, #484]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	650b      	str	r3, [r1, #80]	; 0x50
 8005fa8:	e001      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d049      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc2:	d02e      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc8:	d828      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fce:	d02a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd4:	d822      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fda:	d026      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fe0:	d81c      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe6:	d010      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fec:	d816      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01d      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff6:	d111      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fdf2 	bl	8007be8 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006008:	e012      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3324      	adds	r3, #36	; 0x24
 800600e:	2101      	movs	r1, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f001 fe9b 	bl	8007d4c <RCCEx_PLL3_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800601a:	e009      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	e006      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006022:	bf00      	nop
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800602e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006036:	4b54      	ldr	r3, [pc, #336]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006042:	4951      	ldr	r1, [pc, #324]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	650b      	str	r3, [r1, #80]	; 0x50
 8006048:	e001      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04b      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006064:	d02e      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800606a:	d828      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d02a      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d822      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006078:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800607c:	d026      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800607e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006082:	d81c      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006088:	d010      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800608a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608e:	d816      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01d      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006098:	d111      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	2101      	movs	r1, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fda1 	bl	8007be8 <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060aa:	e012      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3324      	adds	r3, #36	; 0x24
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fe4a 	bl	8007d4c <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060bc:	e009      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
      break;
 80060c2:	e006      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80060c4:	bf00      	nop
 80060c6:	e004      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80060c8:	bf00      	nop
 80060ca:	e002      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80060cc:	bf00      	nop
 80060ce:	e000      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80060d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060d8:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060e6:	4928      	ldr	r1, [pc, #160]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	658b      	str	r3, [r1, #88]	; 0x58
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d02f      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006106:	d00e      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800610c:	d814      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006116:	d10f      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006124:	e00c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	2101      	movs	r1, #1
 800612c:	4618      	mov	r0, r3
 800612e:	f001 fd5b 	bl	8007be8 <RCCEx_PLL2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
      break;
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006152:	490d      	ldr	r1, [pc, #52]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	650b      	str	r3, [r1, #80]	; 0x50
 8006158:	e001      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d033      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	2b03      	cmp	r3, #3
 8006170:	d81c      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061b3 	.word	0x080061b3
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619b 	.word	0x0800619b
 8006184:	080061b3 	.word	0x080061b3
 8006188:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4bb8      	ldr	r3, [pc, #736]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4ab7      	ldr	r2, [pc, #732]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006198:	e00c      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3304      	adds	r3, #4
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fd21 	bl	8007be8 <RCCEx_PLL2_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	e000      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80061b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061ba:	4bad      	ldr	r3, [pc, #692]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061be:	f023 0203 	bic.w	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	49aa      	ldr	r1, [pc, #680]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061cc:	e001      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8086 	beq.w	80062ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e0:	4ba4      	ldr	r3, [pc, #656]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4aa3      	ldr	r2, [pc, #652]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ec:	f7fa fd60 	bl	8000cb0 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f2:	e009      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f4:	f7fa fd5c 	bl	8000cb0 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d902      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	75fb      	strb	r3, [r7, #23]
        break;
 8006206:	e005      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006208:	4b9a      	ldr	r3, [pc, #616]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ef      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d166      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800621a:	4b95      	ldr	r3, [pc, #596]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800621c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006224:	4053      	eors	r3, r2
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d013      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800622e:	4b90      	ldr	r3, [pc, #576]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006238:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4a8c      	ldr	r2, [pc, #560]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800623e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006242:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006244:	4b8a      	ldr	r3, [pc, #552]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	4a89      	ldr	r2, [pc, #548]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006250:	4a87      	ldr	r2, [pc, #540]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800625c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006260:	d115      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006262:	f7fa fd25 	bl	8000cb0 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006268:	e00b      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fa fd21 	bl	8000cb0 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	; 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d902      	bls.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	75fb      	strb	r3, [r7, #23]
            break;
 8006280:	e005      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006282:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ed      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d126      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800629a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a2:	d10d      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80062a4:	4b72      	ldr	r3, [pc, #456]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062b2:	0919      	lsrs	r1, r3, #4
 80062b4:	4b70      	ldr	r3, [pc, #448]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80062b6:	400b      	ands	r3, r1
 80062b8:	496d      	ldr	r1, [pc, #436]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	610b      	str	r3, [r1, #16]
 80062be:	e005      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80062c0:	4b6b      	ldr	r3, [pc, #428]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4a6a      	ldr	r2, [pc, #424]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062ca:	6113      	str	r3, [r2, #16]
 80062cc:	4b68      	ldr	r3, [pc, #416]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	4965      	ldr	r1, [pc, #404]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	670b      	str	r3, [r1, #112]	; 0x70
 80062e0:	e004      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	75bb      	strb	r3, [r7, #22]
 80062e6:	e001      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d07e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fc:	2b28      	cmp	r3, #40	; 0x28
 80062fe:	d867      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	080063d7 	.word	0x080063d7
 800630c:	080063d1 	.word	0x080063d1
 8006310:	080063d1 	.word	0x080063d1
 8006314:	080063d1 	.word	0x080063d1
 8006318:	080063d1 	.word	0x080063d1
 800631c:	080063d1 	.word	0x080063d1
 8006320:	080063d1 	.word	0x080063d1
 8006324:	080063d1 	.word	0x080063d1
 8006328:	080063ad 	.word	0x080063ad
 800632c:	080063d1 	.word	0x080063d1
 8006330:	080063d1 	.word	0x080063d1
 8006334:	080063d1 	.word	0x080063d1
 8006338:	080063d1 	.word	0x080063d1
 800633c:	080063d1 	.word	0x080063d1
 8006340:	080063d1 	.word	0x080063d1
 8006344:	080063d1 	.word	0x080063d1
 8006348:	080063bf 	.word	0x080063bf
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063d1 	.word	0x080063d1
 8006354:	080063d1 	.word	0x080063d1
 8006358:	080063d1 	.word	0x080063d1
 800635c:	080063d1 	.word	0x080063d1
 8006360:	080063d1 	.word	0x080063d1
 8006364:	080063d1 	.word	0x080063d1
 8006368:	080063d7 	.word	0x080063d7
 800636c:	080063d1 	.word	0x080063d1
 8006370:	080063d1 	.word	0x080063d1
 8006374:	080063d1 	.word	0x080063d1
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063d1 	.word	0x080063d1
 8006380:	080063d1 	.word	0x080063d1
 8006384:	080063d1 	.word	0x080063d1
 8006388:	080063d7 	.word	0x080063d7
 800638c:	080063d1 	.word	0x080063d1
 8006390:	080063d1 	.word	0x080063d1
 8006394:	080063d1 	.word	0x080063d1
 8006398:	080063d1 	.word	0x080063d1
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063d1 	.word	0x080063d1
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063d7 	.word	0x080063d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	2101      	movs	r1, #1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fc18 	bl	8007be8 <RCCEx_PLL2_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063bc:	e00c      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2101      	movs	r1, #1
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 fcc1 	bl	8007d4c <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063ce:	e003      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	e000      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80063d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ea:	4921      	ldr	r1, [pc, #132]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	654b      	str	r3, [r1, #84]	; 0x54
 80063f0:	e001      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d03e      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006406:	2b05      	cmp	r3, #5
 8006408:	d820      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006453 	.word	0x08006453
 8006414:	08006429 	.word	0x08006429
 8006418:	0800643b 	.word	0x0800643b
 800641c:	08006453 	.word	0x08006453
 8006420:	08006453 	.word	0x08006453
 8006424:	08006453 	.word	0x08006453
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fbda 	bl	8007be8 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006438:	e00c      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3324      	adds	r3, #36	; 0x24
 800643e:	2101      	movs	r1, #1
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fc83 	bl	8007d4c <RCCEx_PLL3_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800644a:	e003      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      break;
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d110      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f023 0207 	bic.w	r2, r3, #7
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006466:	4902      	ldr	r1, [pc, #8]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006468:	4313      	orrs	r3, r2
 800646a:	654b      	str	r3, [r1, #84]	; 0x54
 800646c:	e008      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800646e:	bf00      	nop
 8006470:	58024400 	.word	0x58024400
 8006474:	58024800 	.word	0x58024800
 8006478:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d039      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	2b05      	cmp	r3, #5
 8006494:	d820      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064df 	.word	0x080064df
 80064a0:	080064b5 	.word	0x080064b5
 80064a4:	080064c7 	.word	0x080064c7
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064df 	.word	0x080064df
 80064b0:	080064df 	.word	0x080064df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3304      	adds	r3, #4
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fb94 	bl	8007be8 <RCCEx_PLL2_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064c4:	e00c      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3324      	adds	r3, #36	; 0x24
 80064ca:	2101      	movs	r1, #1
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fc3d 	bl	8007d4c <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	75fb      	strb	r3, [r7, #23]
      break;
 80064dc:	e000      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80064de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064e6:	4bb7      	ldr	r3, [pc, #732]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ea:	f023 0207 	bic.w	r2, r3, #7
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	49b3      	ldr	r1, [pc, #716]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	658b      	str	r3, [r1, #88]	; 0x58
 80064fa:	e001      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d04b      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006516:	d02e      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800651c:	d828      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d02a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d822      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800652a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800652e:	d026      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006534:	d81c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653a:	d010      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800653c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006540:	d816      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01d      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800654a:	d111      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fb48 	bl	8007be8 <RCCEx_PLL2_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800655c:	e012      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3324      	adds	r3, #36	; 0x24
 8006562:	2102      	movs	r1, #2
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fbf1 	bl	8007d4c <RCCEx_PLL3_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800656e:	e009      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
      break;
 8006574:	e006      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800658a:	4b8e      	ldr	r3, [pc, #568]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006598:	498a      	ldr	r1, [pc, #552]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800659a:	4313      	orrs	r3, r2
 800659c:	654b      	str	r3, [r1, #84]	; 0x54
 800659e:	e001      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d04b      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ba:	d02e      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80065bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065c0:	d828      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	d02a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80065c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065cc:	d822      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d2:	d026      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d8:	d81c      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065de:	d010      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e4:	d816      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01d      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ee:	d111      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 faf6 	bl	8007be8 <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006600:	e012      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3324      	adds	r3, #36	; 0x24
 8006606:	2102      	movs	r1, #2
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fb9f 	bl	8007d4c <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006612:	e009      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e006      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800661a:	bf00      	nop
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800662e:	4b65      	ldr	r3, [pc, #404]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006632:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663c:	4961      	ldr	r1, [pc, #388]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800663e:	4313      	orrs	r3, r2
 8006640:	658b      	str	r3, [r1, #88]	; 0x58
 8006642:	e001      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	d04b      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800665e:	d02e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006660:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006664:	d828      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666a:	d02a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800666c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006670:	d822      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006672:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006676:	d026      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006678:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800667c:	d81c      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800667e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006682:	d010      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006688:	d816      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01d      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006692:	d111      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f001 faa4 	bl	8007be8 <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066a4:	e012      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fb4d 	bl	8007d4c <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80066b6:	e009      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	e006      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80066ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066d2:	4b3c      	ldr	r3, [pc, #240]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066e0:	4938      	ldr	r1, [pc, #224]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	658b      	str	r3, [r1, #88]	; 0x58
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006702:	d10a      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	2102      	movs	r1, #2
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fb1e 	bl	8007d4c <RCCEx_PLL3_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800671a:	4b2a      	ldr	r3, [pc, #168]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006728:	4926      	ldr	r1, [pc, #152]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800672a:	4313      	orrs	r3, r2
 800672c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b00      	cmp	r3, #0
 8006738:	d01a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	d10a      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	2102      	movs	r1, #2
 800674c:	4618      	mov	r0, r3
 800674e:	f001 fafd 	bl	8007d4c <RCCEx_PLL3_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800676a:	4916      	ldr	r1, [pc, #88]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800676c:	4313      	orrs	r3, r2
 800676e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d036      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006786:	d01f      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800678c:	d817      	bhi.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006796:	d009      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006798:	e011      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3304      	adds	r3, #4
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 fa21 	bl	8007be8 <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067aa:	e00e      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3324      	adds	r3, #36	; 0x24
 80067b0:	2102      	movs	r1, #2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 faca 	bl	8007d4c <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80067bc:	e005      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
      break;
 80067c2:	e002      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80067c4:	58024400 	.word	0x58024400
      break;
 80067c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067d0:	4b93      	ldr	r3, [pc, #588]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067de:	4990      	ldr	r1, [pc, #576]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	658b      	str	r3, [r1, #88]	; 0x58
 80067e4:	e001      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d033      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006800:	d01c      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006802:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006806:	d816      	bhi.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680c:	d003      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800680e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006812:	d007      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006814:	e00f      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006816:	4b82      	ldr	r3, [pc, #520]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a81      	ldr	r2, [pc, #516]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800681c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006822:	e00c      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3324      	adds	r3, #36	; 0x24
 8006828:	2101      	movs	r1, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fa8e 	bl	8007d4c <RCCEx_PLL3_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006834:	e003      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
      break;
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800683c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006844:	4b76      	ldr	r3, [pc, #472]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006852:	4973      	ldr	r1, [pc, #460]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	654b      	str	r3, [r1, #84]	; 0x54
 8006858:	e001      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d029      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006876:	d007      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006878:	e00f      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687a:	4b69      	ldr	r3, [pc, #420]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	4a68      	ldr	r2, [pc, #416]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006886:	e00b      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	2102      	movs	r1, #2
 800688e:	4618      	mov	r0, r3
 8006890:	f001 f9aa 	bl	8007be8 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
      break;
 800689e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068a6:	4b5e      	ldr	r3, [pc, #376]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	495b      	ldr	r1, [pc, #364]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068b8:	e001      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fa3b 	bl	8007d4c <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d030      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f4:	d017      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80068f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fa:	d811      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d013      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006906:	d80b      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800690c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006910:	d106      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006912:	4b43      	ldr	r3, [pc, #268]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	4a42      	ldr	r2, [pc, #264]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800691e:	e007      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
      break;
 8006924:	e004      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006926:	bf00      	nop
 8006928:	e002      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800692e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006936:	4b3a      	ldr	r3, [pc, #232]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006942:	4937      	ldr	r1, [pc, #220]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006944:	4313      	orrs	r3, r2
 8006946:	654b      	str	r3, [r1, #84]	; 0x54
 8006948:	e001      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800695a:	4b31      	ldr	r3, [pc, #196]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800695c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	492e      	ldr	r1, [pc, #184]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006978:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006986:	4926      	ldr	r1, [pc, #152]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006988:	4313      	orrs	r3, r2
 800698a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800699a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a4:	491e      	ldr	r1, [pc, #120]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069c0:	6113      	str	r3, [r2, #16]
 80069c2:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069cc:	4914      	ldr	r1, [pc, #80]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da08      	bge.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	490e      	ldr	r1, [pc, #56]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d009      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	4906      	ldr	r1, [pc, #24]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a0c:	7dbb      	ldrb	r3, [r7, #22]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	58024400 	.word	0x58024400

08006a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b090      	sub	sp, #64	; 0x40
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a32:	f040 8095 	bne.w	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006a36:	4bae      	ldr	r3, [pc, #696]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	f200 8088 	bhi.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006b51 	.word	0x08006b51
 8006a60:	08006add 	.word	0x08006add

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a64:	4ba2      	ldr	r3, [pc, #648]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a70:	d108      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ff64 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a80:	f000 bc95 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a88:	f000 bc91 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a8c:	4b98      	ldr	r3, [pc, #608]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a98:	d108      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9a:	f107 0318 	add.w	r3, r7, #24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fca8 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006aa8:	f000 bc81 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab0:	f000 bc7d 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ab4:	4b8e      	ldr	r3, [pc, #568]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac0:	d108      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ac2:	f107 030c 	add.w	r3, r7, #12
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fde8 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ad0:	f000 bc6d 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad8:	f000 bc69 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006adc:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ae6:	4b82      	ldr	r3, [pc, #520]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006af8:	4b7d      	ldr	r3, [pc, #500]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	4a7c      	ldr	r2, [pc, #496]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b0a:	e01f      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b0c:	4b78      	ldr	r3, [pc, #480]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b18:	d106      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b20:	d102      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b22:	4b75      	ldr	r3, [pc, #468]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	e011      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b28:	4b71      	ldr	r3, [pc, #452]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3c:	d102      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b3e:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b48:	f000 bc31 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006b4c:	f000 bc2f 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b50:	4b6b      	ldr	r3, [pc, #428]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b54:	f000 bc2b 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b5c:	f000 bc27 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b66:	f040 8095 	bne.w	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006b6a:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d04d      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b82:	f200 8084 	bhi.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2bc0      	cmp	r3, #192	; 0xc0
 8006b8a:	d07d      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b90:	d87d      	bhi.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2b80      	cmp	r3, #128	; 0x80
 8006b96:	d02d      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2b80      	cmp	r3, #128	; 0x80
 8006b9c:	d877      	bhi.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d012      	beq.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006baa:	e070      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bac:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb8:	d107      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fec0 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bc8:	e3f1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bce:	e3ee      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bd0:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bdc:	d107      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bde:	f107 0318 	add.w	r3, r7, #24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fc06 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bec:	e3df      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf2:	e3dc      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bf4:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c00:	d107      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fd48 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c10:	e3cd      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c16:	e3ca      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c18:	4b35      	ldr	r3, [pc, #212]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c22:	4b33      	ldr	r3, [pc, #204]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d10c      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c46:	e01e      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c54:	d106      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5c:	d102      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c5e:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c62:	e010      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c64:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c70:	d106      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c78:	d102      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c84:	e393      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c86:	e392      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c88:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8c:	e38f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c92:	e38c      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	f040 80a7 	bne.w	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006c9e:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cae:	d05f      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cb6:	f200 8096 	bhi.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cc0:	f000 808e 	beq.w	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006cca:	f200 808c 	bhi.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd4:	d03a      	beq.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cdc:	f200 8083 	bhi.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cec:	d01c      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006cee:	e07a      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	03d09000 	.word	0x03d09000
 8006cf8:	003d0900 	.word	0x003d0900
 8006cfc:	017d7840 	.word	0x017d7840
 8006d00:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d04:	4baa      	ldr	r3, [pc, #680]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fe14 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d20:	e345      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d26:	e342      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d28:	4ba1      	ldr	r3, [pc, #644]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d34:	d107      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d36:	f107 0318 	add.w	r3, r7, #24
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fb5a 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d44:	e333      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4a:	e330      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d4c:	4b98      	ldr	r3, [pc, #608]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d58:	d107      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5a:	f107 030c 	add.w	r3, r7, #12
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fc9c 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d68:	e321      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d6e:	e31e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d70:	4b8f      	ldr	r3, [pc, #572]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d7a:	4b8d      	ldr	r3, [pc, #564]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d8c:	4b88      	ldr	r3, [pc, #544]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	08db      	lsrs	r3, r3, #3
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	4a87      	ldr	r2, [pc, #540]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d9e:	e01e      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006da0:	4b83      	ldr	r3, [pc, #524]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dac:	d106      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006db4:	d102      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006db6:	4b80      	ldr	r3, [pc, #512]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dba:	e010      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dbc:	4b7c      	ldr	r3, [pc, #496]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc8:	d106      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd0:	d102      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006dd2:	4b7a      	ldr	r3, [pc, #488]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd6:	e002      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006ddc:	e2e7      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006dde:	e2e6      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006de0:	4b77      	ldr	r3, [pc, #476]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de4:	e2e3      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dea:	e2e0      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006df2:	f040 809c 	bne.w	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006df6:	4b6e      	ldr	r3, [pc, #440]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006dfe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e06:	d054      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e0e:	f200 808b 	bhi.w	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e18:	f000 8083 	beq.w	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e22:	f200 8081 	bhi.w	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e2c:	d02f      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e34:	d878      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e42:	d012      	beq.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006e44:	e070      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e46:	4b5a      	ldr	r3, [pc, #360]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e52:	d107      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fd73 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e62:	e2a4      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e68:	e2a1      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e6a:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e76:	d107      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e78:	f107 0318 	add.w	r3, r7, #24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fab9 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006e86:	e292      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e8c:	e28f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e8e:	4b48      	ldr	r3, [pc, #288]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9a:	d107      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fbfb 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eaa:	e280      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb0:	e27d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006eb2:	4b3f      	ldr	r3, [pc, #252]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ebc:	4b3c      	ldr	r3, [pc, #240]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ece:	4b38      	ldr	r3, [pc, #224]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	08db      	lsrs	r3, r3, #3
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee0:	e01e      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ee2:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eee:	d106      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef6:	d102      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006ef8:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efc:	e010      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006efe:	4b2c      	ldr	r3, [pc, #176]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f0a:	d106      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f12:	d102      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f18:	e002      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f1e:	e246      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006f20:	e245      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f22:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f26:	e242      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f2c:	e23f      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f34:	f040 80a8 	bne.w	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f48:	d060      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f50:	f200 8097 	bhi.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f5a:	f000 808f 	beq.w	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f64:	f200 808d 	bhi.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6e:	d03b      	beq.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f76:	f200 8084 	bhi.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d004      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f86:	d01d      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006f88:	e07b      	b.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fcd1 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fa6:	e202      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fac:	e1ff      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	03d09000 	.word	0x03d09000
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	017d7840 	.word	0x017d7840
 8006fc0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc4:	4ba3      	ldr	r3, [pc, #652]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0318 	add.w	r3, r7, #24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fa0c 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fe0:	e1e5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe6:	e1e2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fe8:	4b9a      	ldr	r3, [pc, #616]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff4:	d107      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff6:	f107 030c 	add.w	r3, r7, #12
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fb4e 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007004:	e1d3      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700a:	e1d0      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800700c:	4b91      	ldr	r3, [pc, #580]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800700e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007014:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007016:	4b8f      	ldr	r3, [pc, #572]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d10c      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007028:	4b8a      	ldr	r3, [pc, #552]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	4a89      	ldr	r2, [pc, #548]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800703a:	e01e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800703c:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007048:	d106      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007050:	d102      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007052:	4b82      	ldr	r3, [pc, #520]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007056:	e010      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007058:	4b7e      	ldr	r3, [pc, #504]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007064:	d106      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706c:	d102      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800706e:	4b7c      	ldr	r3, [pc, #496]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007072:	e002      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007078:	e199      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800707a:	e198      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800707c:	4b79      	ldr	r3, [pc, #484]	; (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007080:	e195      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007086:	e192      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800708e:	d173      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007090:	4b70      	ldr	r3, [pc, #448]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a0:	d02f      	beq.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a8:	d863      	bhi.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d012      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80070b8:	e05b      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ba:	4b66      	ldr	r3, [pc, #408]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c8:	f107 0318 	add.w	r3, r7, #24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 f991 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070d6:	e16a      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070dc:	e167      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ea:	d107      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fad3 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80070fa:	e158      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007100:	e155      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007102:	4b54      	ldr	r3, [pc, #336]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800710a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800710c:	4b51      	ldr	r3, [pc, #324]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b04      	cmp	r3, #4
 8007116:	d10c      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800711e:	4b4d      	ldr	r3, [pc, #308]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	08db      	lsrs	r3, r3, #3
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	4a4b      	ldr	r2, [pc, #300]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007130:	e01e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007132:	4b48      	ldr	r3, [pc, #288]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713e:	d106      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007146:	d102      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007148:	4b44      	ldr	r3, [pc, #272]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714c:	e010      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800715a:	d106      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007162:	d102      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007164:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800716e:	e11e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007170:	e11d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e11a      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717e:	d133      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007180:	4b34      	ldr	r3, [pc, #208]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007188:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d012      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007198:	e023      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800719a:	4b2e      	ldr	r3, [pc, #184]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071a6:	d107      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fbc9 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071b6:	e0fa      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071bc:	e0f7      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071be:	4b25      	ldr	r3, [pc, #148]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ca:	d107      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071cc:	f107 0318 	add.w	r3, r7, #24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f90f 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80071da:	e0e8      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e0:	e0e5      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e6:	e0e2      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ee:	f040 808f 	bne.w	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80071fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007202:	d075      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800720a:	d87e      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d060      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d876      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007222:	d045      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800722a:	d86e      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007232:	d02b      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723a:	d866      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007248:	d00e      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800724a:	e05e      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800724c:	f000 f8bc 	bl	80073c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007250:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007252:	e0ac      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007254:	58024400 	.word	0x58024400
 8007258:	03d09000 	.word	0x03d09000
 800725c:	003d0900 	.word	0x003d0900
 8007260:	017d7840 	.word	0x017d7840
 8007264:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007268:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007274:	d107      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007276:	f107 0318 	add.w	r3, r7, #24
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f8ba 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007284:	e093      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	e090      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800728c:	4b4a      	ldr	r3, [pc, #296]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007298:	d107      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f9fc 	bl	800769c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072a8:	e081      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ae:	e07e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072b0:	4b41      	ldr	r3, [pc, #260]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d109      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072bc:	4b3e      	ldr	r3, [pc, #248]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	08db      	lsrs	r3, r3, #3
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	4a3d      	ldr	r2, [pc, #244]	; (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80072ce:	e06e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d4:	e06b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072d6:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e2:	d102      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80072e4:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072e8:	e061      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ee:	e05e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072f0:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072fc:	d102      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80072fe:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007302:	e054      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007308:	e051      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730e:	e04e      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d148      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007318:	4b27      	ldr	r3, [pc, #156]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d02a      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d838      	bhi.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800733e:	d00d      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007340:	e030      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007350:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007354:	e02b      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735a:	e028      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800735c:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007368:	d107      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800736a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fae8 	bl	8007944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007378:	e019      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800737e:	e016      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f82e 	bl	80073f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800739c:	e007      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a2:	e004      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a8:	e001      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3740      	adds	r7, #64	; 0x40
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	58024400 	.word	0x58024400
 80073bc:	03d09000 	.word	0x03d09000
 80073c0:	003d0900 	.word	0x003d0900
 80073c4:	017d7840 	.word	0x017d7840

080073c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073cc:	f7fe fbba 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	091b      	lsrs	r3, r3, #4
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4904      	ldr	r1, [pc, #16]	; (80073f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	58024400 	.word	0x58024400
 80073f0:	08009144 	.word	0x08009144

080073f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	; 0x24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073fc:	4ba1      	ldr	r3, [pc, #644]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007406:	4b9f      	ldr	r3, [pc, #636]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	0b1b      	lsrs	r3, r3, #12
 800740c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007410:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007412:	4b9c      	ldr	r3, [pc, #624]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800741e:	4b99      	ldr	r3, [pc, #612]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8111 	beq.w	8007664 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f000 8083 	beq.w	8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b02      	cmp	r3, #2
 800744e:	f200 80a1 	bhi.w	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d056      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800745e:	e099      	b.n	8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007460:	4b88      	ldr	r3, [pc, #544]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d02d      	beq.n	80074c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800746c:	4b85      	ldr	r3, [pc, #532]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	08db      	lsrs	r3, r3, #3
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	4a84      	ldr	r2, [pc, #528]	; (8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007478:	fa22 f303 	lsr.w	r3, r2, r3
 800747c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	ee07 3a90 	vmov	s15, r3
 80074a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074c6:	e087      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007690 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074da:	4b6a      	ldr	r3, [pc, #424]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800750a:	e065      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b59      	ldr	r3, [pc, #356]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007532:	eddf 5a56 	vldr	s11, [pc, #344]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754e:	e043      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007562:	4b48      	ldr	r3, [pc, #288]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	ed97 6a03 	vldr	s12, [r7, #12]
 8007576:	eddf 5a45 	vldr	s11, [pc, #276]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007592:	e021      	b.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b37      	ldr	r3, [pc, #220]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075d8:	4b2a      	ldr	r3, [pc, #168]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	0a5b      	lsrs	r3, r3, #9
 80075de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fe:	ee17 2a90 	vmov	r2, s15
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007606:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	0c1b      	lsrs	r3, r3, #16
 800760c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800761c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007620:	edd7 6a07 	vldr	s13, [r7, #28]
 8007624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800762c:	ee17 2a90 	vmov	r2, s15
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	0e1b      	lsrs	r3, r3, #24
 800763a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800764a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800764e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765a:	ee17 2a90 	vmov	r2, s15
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007662:	e008      	b.n	8007676 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	609a      	str	r2, [r3, #8]
}
 8007676:	bf00      	nop
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	03d09000 	.word	0x03d09000
 800768c:	46000000 	.word	0x46000000
 8007690:	4c742400 	.word	0x4c742400
 8007694:	4a742400 	.word	0x4a742400
 8007698:	4bbebc20 	.word	0x4bbebc20

0800769c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800769c:	b480      	push	{r7}
 800769e:	b089      	sub	sp, #36	; 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a4:	4ba1      	ldr	r3, [pc, #644]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076ae:	4b9f      	ldr	r3, [pc, #636]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	0d1b      	lsrs	r3, r3, #20
 80076b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076ba:	4b9c      	ldr	r3, [pc, #624]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076c6:	4b99      	ldr	r3, [pc, #612]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8111 	beq.w	800790c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f000 8083 	beq.w	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	f200 80a1 	bhi.w	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d056      	beq.n	80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007706:	e099      	b.n	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007708:	4b88      	ldr	r3, [pc, #544]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02d      	beq.n	8007770 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007714:	4b85      	ldr	r3, [pc, #532]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	08db      	lsrs	r3, r3, #3
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	4a84      	ldr	r2, [pc, #528]	; (8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
 8007724:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773e:	4b7b      	ldr	r3, [pc, #492]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007752:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800776e:	e087      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007782:	4b6a      	ldr	r3, [pc, #424]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778a:	ee07 3a90 	vmov	s15, r3
 800778e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007792:	ed97 6a03 	vldr	s12, [r7, #12]
 8007796:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b2:	e065      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c6:	4b59      	ldr	r3, [pc, #356]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f6:	e043      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b48      	ldr	r3, [pc, #288]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a03 	vldr	s12, [r7, #12]
 800781e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800783a:	e021      	b.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b37      	ldr	r3, [pc, #220]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800787e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007880:	4b2a      	ldr	r3, [pc, #168]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789a:	edd7 6a07 	vldr	s13, [r7, #28]
 800789e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078a6:	ee17 2a90 	vmov	r2, s15
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80078ae:	4b1f      	ldr	r3, [pc, #124]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d4:	ee17 2a90 	vmov	r2, s15
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078dc:	4b13      	ldr	r3, [pc, #76]	; (800792c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	0e1b      	lsrs	r3, r3, #24
 80078e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007902:	ee17 2a90 	vmov	r2, s15
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800790a:	e008      	b.n	800791e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
}
 800791e:	bf00      	nop
 8007920:	3724      	adds	r7, #36	; 0x24
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	03d09000 	.word	0x03d09000
 8007934:	46000000 	.word	0x46000000
 8007938:	4c742400 	.word	0x4c742400
 800793c:	4a742400 	.word	0x4a742400
 8007940:	4bbebc20 	.word	0x4bbebc20

08007944 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007944:	b480      	push	{r7}
 8007946:	b089      	sub	sp, #36	; 0x24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800794c:	4ba0      	ldr	r3, [pc, #640]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007956:	4b9e      	ldr	r3, [pc, #632]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	091b      	lsrs	r3, r3, #4
 800795c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007960:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007962:	4b9b      	ldr	r3, [pc, #620]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800796c:	4b98      	ldr	r3, [pc, #608]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	08db      	lsrs	r3, r3, #3
 8007972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8111 	beq.w	8007bb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f000 8083 	beq.w	8007a9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b02      	cmp	r3, #2
 800799c:	f200 80a1 	bhi.w	8007ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d056      	beq.n	8007a5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079ac:	e099      	b.n	8007ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ae:	4b88      	ldr	r3, [pc, #544]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d02d      	beq.n	8007a16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ba:	4b85      	ldr	r3, [pc, #532]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	08db      	lsrs	r3, r3, #3
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	4a83      	ldr	r2, [pc, #524]	; (8007bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079c6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e4:	4b7a      	ldr	r3, [pc, #488]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a10:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a14:	e087      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007bdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a28:	4b69      	ldr	r3, [pc, #420]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a58:	e065      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	ee07 3a90 	vmov	s15, r3
 8007a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007be0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6c:	4b58      	ldr	r3, [pc, #352]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a80:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a9c:	e043      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007be4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab0:	4b47      	ldr	r3, [pc, #284]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab8:	ee07 3a90 	vmov	s15, r3
 8007abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007adc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ae0:	e021      	b.n	8007b26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007bdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af4:	4b36      	ldr	r3, [pc, #216]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b08:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007b26:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	0a5b      	lsrs	r3, r3, #9
 8007b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b4c:	ee17 2a90 	vmov	r2, s15
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007b54:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	0c1b      	lsrs	r3, r3, #16
 8007b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7a:	ee17 2a90 	vmov	r2, s15
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	0e1b      	lsrs	r3, r3, #24
 8007b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba8:	ee17 2a90 	vmov	r2, s15
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	609a      	str	r2, [r3, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	3724      	adds	r7, #36	; 0x24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	03d09000 	.word	0x03d09000
 8007bd8:	46000000 	.word	0x46000000
 8007bdc:	4c742400 	.word	0x4c742400
 8007be0:	4a742400 	.word	0x4a742400
 8007be4:	4bbebc20 	.word	0x4bbebc20

08007be8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bf6:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d101      	bne.n	8007c06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e099      	b.n	8007d3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c06:	4b4f      	ldr	r3, [pc, #316]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c12:	f7f9 f84d 	bl	8000cb0 <HAL_GetTick>
 8007c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c18:	e008      	b.n	8007c2c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c1a:	f7f9 f849 	bl	8000cb0 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e086      	b.n	8007d3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c2c:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c38:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	031b      	lsls	r3, r3, #12
 8007c46:	493f      	ldr	r1, [pc, #252]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	025b      	lsls	r3, r3, #9
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	061b      	lsls	r3, r3, #24
 8007c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c7c:	4931      	ldr	r1, [pc, #196]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c82:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	492d      	ldr	r1, [pc, #180]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	f023 0220 	bic.w	r2, r3, #32
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	4928      	ldr	r1, [pc, #160]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ca6:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4a26      	ldr	r2, [pc, #152]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cac:	f023 0310 	bic.w	r3, r3, #16
 8007cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <RCCEx_PLL2_Config+0x160>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	69d2      	ldr	r2, [r2, #28]
 8007cbe:	00d2      	lsls	r2, r2, #3
 8007cc0:	4920      	ldr	r1, [pc, #128]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	f043 0310 	orr.w	r3, r3, #16
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ce4:	e00f      	b.n	8007d06 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf8:	e005      	b.n	8007d06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d06:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d12:	f7f8 ffcd 	bl	8000cb0 <HAL_GetTick>
 8007d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d18:	e008      	b.n	8007d2c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d1a:	f7f8 ffc9 	bl	8000cb0 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <RCCEx_PLL2_Config+0x15c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f0      	beq.n	8007d1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	58024400 	.word	0x58024400
 8007d48:	ffff0007 	.word	0xffff0007

08007d4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d5a:	4b53      	ldr	r3, [pc, #332]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d101      	bne.n	8007d6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e099      	b.n	8007e9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d6a:	4b4f      	ldr	r3, [pc, #316]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a4e      	ldr	r2, [pc, #312]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d76:	f7f8 ff9b 	bl	8000cb0 <HAL_GetTick>
 8007d7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d7c:	e008      	b.n	8007d90 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d7e:	f7f8 ff97 	bl	8000cb0 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d901      	bls.n	8007d90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e086      	b.n	8007e9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d90:	4b45      	ldr	r3, [pc, #276]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f0      	bne.n	8007d7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d9c:	4b42      	ldr	r3, [pc, #264]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	051b      	lsls	r3, r3, #20
 8007daa:	493f      	ldr	r1, [pc, #252]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	628b      	str	r3, [r1, #40]	; 0x28
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	025b      	lsls	r3, r3, #9
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007de0:	4931      	ldr	r1, [pc, #196]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007de6:	4b30      	ldr	r3, [pc, #192]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	492d      	ldr	r1, [pc, #180]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007df8:	4b2b      	ldr	r3, [pc, #172]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	4928      	ldr	r1, [pc, #160]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e0a:	4b27      	ldr	r3, [pc, #156]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e16:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1a:	4b24      	ldr	r3, [pc, #144]	; (8007eac <RCCEx_PLL3_Config+0x160>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	69d2      	ldr	r2, [r2, #28]
 8007e22:	00d2      	lsls	r2, r2, #3
 8007e24:	4920      	ldr	r1, [pc, #128]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a19      	ldr	r2, [pc, #100]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e48:	e00f      	b.n	8007e6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d106      	bne.n	8007e5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e50:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	4a14      	ldr	r2, [pc, #80]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e5c:	e005      	b.n	8007e6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e76:	f7f8 ff1b 	bl	8000cb0 <HAL_GetTick>
 8007e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e7c:	e008      	b.n	8007e90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e7e:	f7f8 ff17 	bl	8000cb0 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e006      	b.n	8007e9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <RCCEx_PLL3_Config+0x15c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	58024400 	.word	0x58024400
 8007eac:	ffff0007 	.word	0xffff0007

08007eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e049      	b.n	8007f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7f8 fd20 	bl	800091c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f000 fbb0 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e049      	b.n	8008004 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d106      	bne.n	8007f8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f841 	bl	800800c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f000 fb59 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <HAL_TIM_PWM_Start+0x24>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	e03c      	b.n	80080be <HAL_TIM_PWM_Start+0x9e>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d109      	bne.n	800805e <HAL_TIM_PWM_Start+0x3e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b01      	cmp	r3, #1
 8008054:	bf14      	ite	ne
 8008056:	2301      	movne	r3, #1
 8008058:	2300      	moveq	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	e02f      	b.n	80080be <HAL_TIM_PWM_Start+0x9e>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b08      	cmp	r3, #8
 8008062:	d109      	bne.n	8008078 <HAL_TIM_PWM_Start+0x58>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	bf14      	ite	ne
 8008070:	2301      	movne	r3, #1
 8008072:	2300      	moveq	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	e022      	b.n	80080be <HAL_TIM_PWM_Start+0x9e>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b0c      	cmp	r3, #12
 800807c:	d109      	bne.n	8008092 <HAL_TIM_PWM_Start+0x72>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b01      	cmp	r3, #1
 8008088:	bf14      	ite	ne
 800808a:	2301      	movne	r3, #1
 800808c:	2300      	moveq	r3, #0
 800808e:	b2db      	uxtb	r3, r3
 8008090:	e015      	b.n	80080be <HAL_TIM_PWM_Start+0x9e>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b10      	cmp	r3, #16
 8008096:	d109      	bne.n	80080ac <HAL_TIM_PWM_Start+0x8c>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	bf14      	ite	ne
 80080a4:	2301      	movne	r3, #1
 80080a6:	2300      	moveq	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	e008      	b.n	80080be <HAL_TIM_PWM_Start+0x9e>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	bf14      	ite	ne
 80080b8:	2301      	movne	r3, #1
 80080ba:	2300      	moveq	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0a1      	b.n	800820a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xb6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d4:	e023      	b.n	800811e <HAL_TIM_PWM_Start+0xfe>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d104      	bne.n	80080e6 <HAL_TIM_PWM_Start+0xc6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080e4:	e01b      	b.n	800811e <HAL_TIM_PWM_Start+0xfe>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d104      	bne.n	80080f6 <HAL_TIM_PWM_Start+0xd6>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f4:	e013      	b.n	800811e <HAL_TIM_PWM_Start+0xfe>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b0c      	cmp	r3, #12
 80080fa:	d104      	bne.n	8008106 <HAL_TIM_PWM_Start+0xe6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008104:	e00b      	b.n	800811e <HAL_TIM_PWM_Start+0xfe>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b10      	cmp	r3, #16
 800810a:	d104      	bne.n	8008116 <HAL_TIM_PWM_Start+0xf6>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008114:	e003      	b.n	800811e <HAL_TIM_PWM_Start+0xfe>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2201      	movs	r2, #1
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fea2 	bl	8008e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a38      	ldr	r2, [pc, #224]	; (8008214 <HAL_TIM_PWM_Start+0x1f4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d013      	beq.n	800815e <HAL_TIM_PWM_Start+0x13e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a37      	ldr	r2, [pc, #220]	; (8008218 <HAL_TIM_PWM_Start+0x1f8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00e      	beq.n	800815e <HAL_TIM_PWM_Start+0x13e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a35      	ldr	r2, [pc, #212]	; (800821c <HAL_TIM_PWM_Start+0x1fc>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d009      	beq.n	800815e <HAL_TIM_PWM_Start+0x13e>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a34      	ldr	r2, [pc, #208]	; (8008220 <HAL_TIM_PWM_Start+0x200>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d004      	beq.n	800815e <HAL_TIM_PWM_Start+0x13e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a32      	ldr	r2, [pc, #200]	; (8008224 <HAL_TIM_PWM_Start+0x204>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d101      	bne.n	8008162 <HAL_TIM_PWM_Start+0x142>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <HAL_TIM_PWM_Start+0x144>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008176:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <HAL_TIM_PWM_Start+0x1f4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d022      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d01d      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a25      	ldr	r2, [pc, #148]	; (8008228 <HAL_TIM_PWM_Start+0x208>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d018      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a24      	ldr	r2, [pc, #144]	; (800822c <HAL_TIM_PWM_Start+0x20c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d013      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a22      	ldr	r2, [pc, #136]	; (8008230 <HAL_TIM_PWM_Start+0x210>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00e      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <HAL_TIM_PWM_Start+0x1f8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d009      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <HAL_TIM_PWM_Start+0x214>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d004      	beq.n	80081c8 <HAL_TIM_PWM_Start+0x1a8>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a16      	ldr	r2, [pc, #88]	; (800821c <HAL_TIM_PWM_Start+0x1fc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d115      	bne.n	80081f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <HAL_TIM_PWM_Start+0x218>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d015      	beq.n	8008206 <HAL_TIM_PWM_Start+0x1e6>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d011      	beq.n	8008206 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	e008      	b.n	8008206 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e000      	b.n	8008208 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000
 8008218:	40010400 	.word	0x40010400
 800821c:	40014000 	.word	0x40014000
 8008220:	40014400 	.word	0x40014400
 8008224:	40014800 	.word	0x40014800
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00
 8008234:	40001800 	.word	0x40001800
 8008238:	00010007 	.word	0x00010007

0800823c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008256:	2302      	movs	r3, #2
 8008258:	e0ff      	b.n	800845a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b14      	cmp	r3, #20
 8008266:	f200 80f0 	bhi.w	800844a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	080082c5 	.word	0x080082c5
 8008274:	0800844b 	.word	0x0800844b
 8008278:	0800844b 	.word	0x0800844b
 800827c:	0800844b 	.word	0x0800844b
 8008280:	08008305 	.word	0x08008305
 8008284:	0800844b 	.word	0x0800844b
 8008288:	0800844b 	.word	0x0800844b
 800828c:	0800844b 	.word	0x0800844b
 8008290:	08008347 	.word	0x08008347
 8008294:	0800844b 	.word	0x0800844b
 8008298:	0800844b 	.word	0x0800844b
 800829c:	0800844b 	.word	0x0800844b
 80082a0:	08008387 	.word	0x08008387
 80082a4:	0800844b 	.word	0x0800844b
 80082a8:	0800844b 	.word	0x0800844b
 80082ac:	0800844b 	.word	0x0800844b
 80082b0:	080083c9 	.word	0x080083c9
 80082b4:	0800844b 	.word	0x0800844b
 80082b8:	0800844b 	.word	0x0800844b
 80082bc:	0800844b 	.word	0x0800844b
 80082c0:	08008409 	.word	0x08008409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fa5c 	bl	8008788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699a      	ldr	r2, [r3, #24]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0208 	orr.w	r2, r2, #8
 80082de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0204 	bic.w	r2, r2, #4
 80082ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6999      	ldr	r1, [r3, #24]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	619a      	str	r2, [r3, #24]
      break;
 8008302:	e0a5      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68b9      	ldr	r1, [r7, #8]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 facc 	bl	80088a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699a      	ldr	r2, [r3, #24]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800831e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800832e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6999      	ldr	r1, [r3, #24]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	021a      	lsls	r2, r3, #8
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	619a      	str	r2, [r3, #24]
      break;
 8008344:	e084      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fb35 	bl	80089bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69da      	ldr	r2, [r3, #28]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f042 0208 	orr.w	r2, r2, #8
 8008360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0204 	bic.w	r2, r2, #4
 8008370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69d9      	ldr	r1, [r3, #28]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	61da      	str	r2, [r3, #28]
      break;
 8008384:	e064      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fb9d 	bl	8008acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69da      	ldr	r2, [r3, #28]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69d9      	ldr	r1, [r3, #28]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	021a      	lsls	r2, r3, #8
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	61da      	str	r2, [r3, #28]
      break;
 80083c6:	e043      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fbe6 	bl	8008ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0208 	orr.w	r2, r2, #8
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0204 	bic.w	r2, r2, #4
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008406:	e023      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fc2a 	bl	8008c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	021a      	lsls	r2, r3, #8
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008448:	e002      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	75fb      	strb	r3, [r7, #23]
      break;
 800844e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008458:	7dfb      	ldrb	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop

08008464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_TIM_ConfigClockSource+0x1c>
 800847c:	2302      	movs	r3, #2
 800847e:	e0dc      	b.n	800863a <HAL_TIM_ConfigClockSource+0x1d6>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4b6a      	ldr	r3, [pc, #424]	; (8008644 <HAL_TIM_ConfigClockSource+0x1e0>)
 800849c:	4013      	ands	r3, r2
 800849e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a64      	ldr	r2, [pc, #400]	; (8008648 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	f000 80a9 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 80084bc:	4a62      	ldr	r2, [pc, #392]	; (8008648 <HAL_TIM_ConfigClockSource+0x1e4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	f200 80ae 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 80084c4:	4a61      	ldr	r2, [pc, #388]	; (800864c <HAL_TIM_ConfigClockSource+0x1e8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	f000 80a1 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 80084cc:	4a5f      	ldr	r2, [pc, #380]	; (800864c <HAL_TIM_ConfigClockSource+0x1e8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f200 80a6 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 80084d4:	4a5e      	ldr	r2, [pc, #376]	; (8008650 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	f000 8099 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 80084dc:	4a5c      	ldr	r2, [pc, #368]	; (8008650 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f200 809e 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 80084e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80084e8:	f000 8091 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 80084ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80084f0:	f200 8096 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f8:	f000 8089 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 80084fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008500:	f200 808e 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008508:	d03e      	beq.n	8008588 <HAL_TIM_ConfigClockSource+0x124>
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850e:	f200 8087 	bhi.w	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008516:	f000 8086 	beq.w	8008626 <HAL_TIM_ConfigClockSource+0x1c2>
 800851a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851e:	d87f      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008520:	2b70      	cmp	r3, #112	; 0x70
 8008522:	d01a      	beq.n	800855a <HAL_TIM_ConfigClockSource+0xf6>
 8008524:	2b70      	cmp	r3, #112	; 0x70
 8008526:	d87b      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008528:	2b60      	cmp	r3, #96	; 0x60
 800852a:	d050      	beq.n	80085ce <HAL_TIM_ConfigClockSource+0x16a>
 800852c:	2b60      	cmp	r3, #96	; 0x60
 800852e:	d877      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008530:	2b50      	cmp	r3, #80	; 0x50
 8008532:	d03c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x14a>
 8008534:	2b50      	cmp	r3, #80	; 0x50
 8008536:	d873      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d058      	beq.n	80085ee <HAL_TIM_ConfigClockSource+0x18a>
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	d86f      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008540:	2b30      	cmp	r3, #48	; 0x30
 8008542:	d064      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d86b      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008548:	2b20      	cmp	r3, #32
 800854a:	d060      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 800854c:	2b20      	cmp	r3, #32
 800854e:	d867      	bhi.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d05c      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 8008554:	2b10      	cmp	r3, #16
 8008556:	d05a      	beq.n	800860e <HAL_TIM_ConfigClockSource+0x1aa>
 8008558:	e062      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	6899      	ldr	r1, [r3, #8]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	f000 fc61 	bl	8008e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800857c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	609a      	str	r2, [r3, #8]
      break;
 8008586:	e04f      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	6899      	ldr	r1, [r3, #8]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f000 fc4a 	bl	8008e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085aa:	609a      	str	r2, [r3, #8]
      break;
 80085ac:	e03c      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6859      	ldr	r1, [r3, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	461a      	mov	r2, r3
 80085bc:	f000 fbba 	bl	8008d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2150      	movs	r1, #80	; 0x50
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fc14 	bl	8008df4 <TIM_ITRx_SetConfig>
      break;
 80085cc:	e02c      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6859      	ldr	r1, [r3, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	461a      	mov	r2, r3
 80085dc:	f000 fbd9 	bl	8008d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2160      	movs	r1, #96	; 0x60
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fc04 	bl	8008df4 <TIM_ITRx_SetConfig>
      break;
 80085ec:	e01c      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6859      	ldr	r1, [r3, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f000 fb9a 	bl	8008d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2140      	movs	r1, #64	; 0x40
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fbf4 	bl	8008df4 <TIM_ITRx_SetConfig>
      break;
 800860c:	e00c      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f000 fbeb 	bl	8008df4 <TIM_ITRx_SetConfig>
      break;
 800861e:	e003      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	73fb      	strb	r3, [r7, #15]
      break;
 8008624:	e000      	b.n	8008628 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	ffceff88 	.word	0xffceff88
 8008648:	00100040 	.word	0x00100040
 800864c:	00100030 	.word	0x00100030
 8008650:	00100020 	.word	0x00100020

08008654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a40      	ldr	r2, [pc, #256]	; (8008768 <TIM_Base_SetConfig+0x114>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d013      	beq.n	8008694 <TIM_Base_SetConfig+0x40>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008672:	d00f      	beq.n	8008694 <TIM_Base_SetConfig+0x40>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a3d      	ldr	r2, [pc, #244]	; (800876c <TIM_Base_SetConfig+0x118>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00b      	beq.n	8008694 <TIM_Base_SetConfig+0x40>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a3c      	ldr	r2, [pc, #240]	; (8008770 <TIM_Base_SetConfig+0x11c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d007      	beq.n	8008694 <TIM_Base_SetConfig+0x40>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a3b      	ldr	r2, [pc, #236]	; (8008774 <TIM_Base_SetConfig+0x120>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_Base_SetConfig+0x40>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a3a      	ldr	r2, [pc, #232]	; (8008778 <TIM_Base_SetConfig+0x124>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d108      	bne.n	80086a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a2f      	ldr	r2, [pc, #188]	; (8008768 <TIM_Base_SetConfig+0x114>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d01f      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b4:	d01b      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a2c      	ldr	r2, [pc, #176]	; (800876c <TIM_Base_SetConfig+0x118>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d017      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a2b      	ldr	r2, [pc, #172]	; (8008770 <TIM_Base_SetConfig+0x11c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d013      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a2a      	ldr	r2, [pc, #168]	; (8008774 <TIM_Base_SetConfig+0x120>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00f      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a29      	ldr	r2, [pc, #164]	; (8008778 <TIM_Base_SetConfig+0x124>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00b      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a28      	ldr	r2, [pc, #160]	; (800877c <TIM_Base_SetConfig+0x128>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d007      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a27      	ldr	r2, [pc, #156]	; (8008780 <TIM_Base_SetConfig+0x12c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d003      	beq.n	80086ee <TIM_Base_SetConfig+0x9a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a26      	ldr	r2, [pc, #152]	; (8008784 <TIM_Base_SetConfig+0x130>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d108      	bne.n	8008700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a10      	ldr	r2, [pc, #64]	; (8008768 <TIM_Base_SetConfig+0x114>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_Base_SetConfig+0xf8>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a12      	ldr	r2, [pc, #72]	; (8008778 <TIM_Base_SetConfig+0x124>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_Base_SetConfig+0xf8>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a11      	ldr	r2, [pc, #68]	; (800877c <TIM_Base_SetConfig+0x128>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_Base_SetConfig+0xf8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a10      	ldr	r2, [pc, #64]	; (8008780 <TIM_Base_SetConfig+0x12c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_Base_SetConfig+0xf8>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <TIM_Base_SetConfig+0x130>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d103      	bne.n	8008754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	615a      	str	r2, [r3, #20]
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	40010000 	.word	0x40010000
 800876c:	40000400 	.word	0x40000400
 8008770:	40000800 	.word	0x40000800
 8008774:	40000c00 	.word	0x40000c00
 8008778:	40010400 	.word	0x40010400
 800877c:	40014000 	.word	0x40014000
 8008780:	40014400 	.word	0x40014400
 8008784:	40014800 	.word	0x40014800

08008788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4b37      	ldr	r3, [pc, #220]	; (8008890 <TIM_OC1_SetConfig+0x108>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f023 0302 	bic.w	r3, r3, #2
 80087d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <TIM_OC1_SetConfig+0x10c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00f      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a2c      	ldr	r2, [pc, #176]	; (8008898 <TIM_OC1_SetConfig+0x110>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a2b      	ldr	r2, [pc, #172]	; (800889c <TIM_OC1_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d007      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a2a      	ldr	r2, [pc, #168]	; (80088a0 <TIM_OC1_SetConfig+0x118>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a29      	ldr	r2, [pc, #164]	; (80088a4 <TIM_OC1_SetConfig+0x11c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d10c      	bne.n	800881e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f023 0308 	bic.w	r3, r3, #8
 800880a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f023 0304 	bic.w	r3, r3, #4
 800881c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <TIM_OC1_SetConfig+0x10c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00f      	beq.n	8008846 <TIM_OC1_SetConfig+0xbe>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a1b      	ldr	r2, [pc, #108]	; (8008898 <TIM_OC1_SetConfig+0x110>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00b      	beq.n	8008846 <TIM_OC1_SetConfig+0xbe>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a1a      	ldr	r2, [pc, #104]	; (800889c <TIM_OC1_SetConfig+0x114>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d007      	beq.n	8008846 <TIM_OC1_SetConfig+0xbe>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <TIM_OC1_SetConfig+0x118>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_OC1_SetConfig+0xbe>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <TIM_OC1_SetConfig+0x11c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d111      	bne.n	800886a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800884c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	fffeff8f 	.word	0xfffeff8f
 8008894:	40010000 	.word	0x40010000
 8008898:	40010400 	.word	0x40010400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40014400 	.word	0x40014400
 80088a4:	40014800 	.word	0x40014800

080088a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f023 0210 	bic.w	r2, r3, #16
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4b34      	ldr	r3, [pc, #208]	; (80089a4 <TIM_OC2_SetConfig+0xfc>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f023 0320 	bic.w	r3, r3, #32
 80088f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a29      	ldr	r2, [pc, #164]	; (80089a8 <TIM_OC2_SetConfig+0x100>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d003      	beq.n	8008910 <TIM_OC2_SetConfig+0x68>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a28      	ldr	r2, [pc, #160]	; (80089ac <TIM_OC2_SetConfig+0x104>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10d      	bne.n	800892c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800892a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a1e      	ldr	r2, [pc, #120]	; (80089a8 <TIM_OC2_SetConfig+0x100>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00f      	beq.n	8008954 <TIM_OC2_SetConfig+0xac>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <TIM_OC2_SetConfig+0x104>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00b      	beq.n	8008954 <TIM_OC2_SetConfig+0xac>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <TIM_OC2_SetConfig+0x108>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d007      	beq.n	8008954 <TIM_OC2_SetConfig+0xac>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <TIM_OC2_SetConfig+0x10c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_OC2_SetConfig+0xac>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a1a      	ldr	r2, [pc, #104]	; (80089b8 <TIM_OC2_SetConfig+0x110>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d113      	bne.n	800897c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800895a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	feff8fff 	.word	0xfeff8fff
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40010400 	.word	0x40010400
 80089b0:	40014000 	.word	0x40014000
 80089b4:	40014400 	.word	0x40014400
 80089b8:	40014800 	.word	0x40014800

080089bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <TIM_OC3_SetConfig+0xf8>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a28      	ldr	r2, [pc, #160]	; (8008ab8 <TIM_OC3_SetConfig+0xfc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d003      	beq.n	8008a22 <TIM_OC3_SetConfig+0x66>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a27      	ldr	r2, [pc, #156]	; (8008abc <TIM_OC3_SetConfig+0x100>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d10d      	bne.n	8008a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a1d      	ldr	r2, [pc, #116]	; (8008ab8 <TIM_OC3_SetConfig+0xfc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00f      	beq.n	8008a66 <TIM_OC3_SetConfig+0xaa>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <TIM_OC3_SetConfig+0x100>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_OC3_SetConfig+0xaa>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <TIM_OC3_SetConfig+0x104>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_OC3_SetConfig+0xaa>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <TIM_OC3_SetConfig+0x108>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_OC3_SetConfig+0xaa>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a19      	ldr	r2, [pc, #100]	; (8008ac8 <TIM_OC3_SetConfig+0x10c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d113      	bne.n	8008a8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	621a      	str	r2, [r3, #32]
}
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	fffeff8f 	.word	0xfffeff8f
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40010400 	.word	0x40010400
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40014400 	.word	0x40014400
 8008ac8:	40014800 	.word	0x40014800

08008acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <TIM_OC4_SetConfig+0xbc>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	031b      	lsls	r3, r3, #12
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <TIM_OC4_SetConfig+0xc0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00f      	beq.n	8008b4c <TIM_OC4_SetConfig+0x80>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <TIM_OC4_SetConfig+0xc4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00b      	beq.n	8008b4c <TIM_OC4_SetConfig+0x80>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a17      	ldr	r2, [pc, #92]	; (8008b94 <TIM_OC4_SetConfig+0xc8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d007      	beq.n	8008b4c <TIM_OC4_SetConfig+0x80>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <TIM_OC4_SetConfig+0xcc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d003      	beq.n	8008b4c <TIM_OC4_SetConfig+0x80>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <TIM_OC4_SetConfig+0xd0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d109      	bne.n	8008b60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	019b      	lsls	r3, r3, #6
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	feff8fff 	.word	0xfeff8fff
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40010400 	.word	0x40010400
 8008b94:	40014000 	.word	0x40014000
 8008b98:	40014400 	.word	0x40014400
 8008b9c:	40014800 	.word	0x40014800

08008ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <TIM_OC5_SetConfig+0xb0>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a18      	ldr	r2, [pc, #96]	; (8008c54 <TIM_OC5_SetConfig+0xb4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00f      	beq.n	8008c16 <TIM_OC5_SetConfig+0x76>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <TIM_OC5_SetConfig+0xb8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00b      	beq.n	8008c16 <TIM_OC5_SetConfig+0x76>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a16      	ldr	r2, [pc, #88]	; (8008c5c <TIM_OC5_SetConfig+0xbc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d007      	beq.n	8008c16 <TIM_OC5_SetConfig+0x76>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a15      	ldr	r2, [pc, #84]	; (8008c60 <TIM_OC5_SetConfig+0xc0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d003      	beq.n	8008c16 <TIM_OC5_SetConfig+0x76>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a14      	ldr	r2, [pc, #80]	; (8008c64 <TIM_OC5_SetConfig+0xc4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d109      	bne.n	8008c2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	fffeff8f 	.word	0xfffeff8f
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40010400 	.word	0x40010400
 8008c5c:	40014000 	.word	0x40014000
 8008c60:	40014400 	.word	0x40014400
 8008c64:	40014800 	.word	0x40014800

08008c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4b22      	ldr	r3, [pc, #136]	; (8008d1c <TIM_OC6_SetConfig+0xb4>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a19      	ldr	r2, [pc, #100]	; (8008d20 <TIM_OC6_SetConfig+0xb8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00f      	beq.n	8008ce0 <TIM_OC6_SetConfig+0x78>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <TIM_OC6_SetConfig+0xbc>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00b      	beq.n	8008ce0 <TIM_OC6_SetConfig+0x78>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <TIM_OC6_SetConfig+0xc0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d007      	beq.n	8008ce0 <TIM_OC6_SetConfig+0x78>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a16      	ldr	r2, [pc, #88]	; (8008d2c <TIM_OC6_SetConfig+0xc4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d003      	beq.n	8008ce0 <TIM_OC6_SetConfig+0x78>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <TIM_OC6_SetConfig+0xc8>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d109      	bne.n	8008cf4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	029b      	lsls	r3, r3, #10
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	621a      	str	r2, [r3, #32]
}
 8008d0e:	bf00      	nop
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	feff8fff 	.word	0xfeff8fff
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40010400 	.word	0x40010400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	f023 0201 	bic.w	r2, r3, #1
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 030a 	bic.w	r3, r3, #10
 8008d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	621a      	str	r2, [r3, #32]
}
 8008d86:	bf00      	nop
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b087      	sub	sp, #28
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0210 	bic.w	r2, r3, #16
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	031b      	lsls	r3, r3, #12
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <TIM_ITRx_SetConfig+0x38>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	f043 0307 	orr.w	r3, r3, #7
 8008e16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	609a      	str	r2, [r3, #8]
}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	ffcfff8f 	.word	0xffcfff8f

08008e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	021a      	lsls	r2, r3, #8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	2201      	movs	r2, #1
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a1a      	ldr	r2, [r3, #32]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	401a      	ands	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1a      	ldr	r2, [r3, #32]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 031f 	and.w	r3, r3, #31
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e06d      	b.n	8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a30      	ldr	r2, [pc, #192]	; (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d004      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2f      	ldr	r2, [pc, #188]	; (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d108      	bne.n	8008f1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a20      	ldr	r2, [pc, #128]	; (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d022      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f46:	d01d      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d018      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d004      	beq.n	8008f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d10c      	bne.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010400 	.word	0x40010400
 8008fc4:	40000400 	.word	0x40000400
 8008fc8:	40000800 	.word	0x40000800
 8008fcc:	40000c00 	.word	0x40000c00
 8008fd0:	40001800 	.word	0x40001800
 8008fd4:	40014000 	.word	0x40014000

08008fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e065      	b.n	80090c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	041b      	lsls	r3, r3, #16
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a16      	ldr	r2, [pc, #88]	; (80090cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d004      	beq.n	8009082 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a14      	ldr	r2, [pc, #80]	; (80090d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d115      	bne.n	80090ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	051b      	lsls	r3, r3, #20
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	40010000 	.word	0x40010000
 80090d0:	40010400 	.word	0x40010400

080090d4 <__libc_init_array>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4d0d      	ldr	r5, [pc, #52]	; (800910c <__libc_init_array+0x38>)
 80090d8:	4c0d      	ldr	r4, [pc, #52]	; (8009110 <__libc_init_array+0x3c>)
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	10a4      	asrs	r4, r4, #2
 80090de:	2600      	movs	r6, #0
 80090e0:	42a6      	cmp	r6, r4
 80090e2:	d109      	bne.n	80090f8 <__libc_init_array+0x24>
 80090e4:	4d0b      	ldr	r5, [pc, #44]	; (8009114 <__libc_init_array+0x40>)
 80090e6:	4c0c      	ldr	r4, [pc, #48]	; (8009118 <__libc_init_array+0x44>)
 80090e8:	f000 f820 	bl	800912c <_init>
 80090ec:	1b64      	subs	r4, r4, r5
 80090ee:	10a4      	asrs	r4, r4, #2
 80090f0:	2600      	movs	r6, #0
 80090f2:	42a6      	cmp	r6, r4
 80090f4:	d105      	bne.n	8009102 <__libc_init_array+0x2e>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fc:	4798      	blx	r3
 80090fe:	3601      	adds	r6, #1
 8009100:	e7ee      	b.n	80090e0 <__libc_init_array+0xc>
 8009102:	f855 3b04 	ldr.w	r3, [r5], #4
 8009106:	4798      	blx	r3
 8009108:	3601      	adds	r6, #1
 800910a:	e7f2      	b.n	80090f2 <__libc_init_array+0x1e>
 800910c:	0800915c 	.word	0x0800915c
 8009110:	0800915c 	.word	0x0800915c
 8009114:	0800915c 	.word	0x0800915c
 8009118:	08009160 	.word	0x08009160

0800911c <memset>:
 800911c:	4402      	add	r2, r0
 800911e:	4603      	mov	r3, r0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <memset+0xa>
 8009124:	4770      	bx	lr
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <memset+0x4>

0800912c <_init>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr

08009138 <_fini>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr
